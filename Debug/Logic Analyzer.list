
Logic Analyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004034  08004034  00005034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040dc  080040dc  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  080040dc  080040dc  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040dc  080040dc  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e0  080040e0  000050e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080040e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006018  2**0
                  CONTENTS
 10 .bss          0001301c  20000018  20000018  00006018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013034  20013034  00006018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a348  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba3  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00011f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab7  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a50  00000000  00000000  00013827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7ee  00000000  00000000  0001a277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00021c39  00000000  00000000  00025a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0004769e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d4c  00000000  00000000  000476e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0004b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800401c 	.word	0x0800401c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	0800401c 	.word	0x0800401c

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000240:	d103      	bne.n	800024a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	691b      	ldr	r3, [r3, #16]
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00c      	b.n	8000264 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3308      	adds	r3, #8
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e002      	b.n	8000258 <vListInsert+0x2e>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	429a      	cmp	r2, r3
 8000262:	d2f6      	bcs.n	8000252 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	685a      	ldr	r2, [r3, #4]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	1c5a      	adds	r2, r3, #1
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	6892      	ldr	r2, [r2, #8]
 80002b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	6852      	ldr	r2, [r2, #4]
 80002bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d103      	bne.n	80002d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002fa:	2301      	movs	r3, #1
 80002fc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10b      	bne.n	8000320 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	f3bf 8f6f 	isb	sy
 8000314:	f3bf 8f4f 	dsb	sy
 8000318:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d05d      	beq.n	80003e2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800032a:	2b00      	cmp	r3, #0
 800032c:	d059      	beq.n	80003e2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000336:	2100      	movs	r1, #0
 8000338:	fba3 2302 	umull	r2, r3, r3, r2
 800033c:	2b00      	cmp	r3, #0
 800033e:	d000      	beq.n	8000342 <xQueueGenericReset+0x52>
 8000340:	2101      	movs	r1, #1
 8000342:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14c      	bne.n	80003e2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000348:	f002 faa0 	bl	800288c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000354:	6939      	ldr	r1, [r7, #16]
 8000356:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000358:	fb01 f303 	mul.w	r3, r1, r3
 800035c:	441a      	add	r2, r3
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	2200      	movs	r2, #0
 8000366:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000378:	3b01      	subs	r3, #1
 800037a:	6939      	ldr	r1, [r7, #16]
 800037c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	441a      	add	r2, r3
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	22ff      	movs	r2, #255	@ 0xff
 800038c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	22ff      	movs	r2, #255	@ 0xff
 8000394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d114      	bne.n	80003c8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	691b      	ldr	r3, [r3, #16]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d01a      	beq.n	80003dc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	3310      	adds	r3, #16
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f9ec 	bl	8001788 <xTaskRemoveFromEventList>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d012      	beq.n	80003dc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <xQueueGenericReset+0x120>)
 80003b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	f3bf 8f4f 	dsb	sy
 80003c2:	f3bf 8f6f 	isb	sy
 80003c6:	e009      	b.n	80003dc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3310      	adds	r3, #16
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff feff 	bl	80001d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	3324      	adds	r3, #36	@ 0x24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff fefa 	bl	80001d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003dc:	f002 fa88 	bl	80028f0 <vPortExitCritical>
 80003e0:	e001      	b.n	80003e6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10b      	bne.n	8000404 <xQueueGenericReset+0x114>
        __asm volatile
 80003ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003f0:	f383 8811 	msr	BASEPRI, r3
 80003f4:	f3bf 8f6f 	isb	sy
 80003f8:	f3bf 8f4f 	dsb	sy
 80003fc:	60bb      	str	r3, [r7, #8]
    }
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000404:	697b      	ldr	r3, [r7, #20]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000ed04 	.word	0xe000ed04

08000414 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	@ 0x28
 8000418:	af02      	add	r7, sp, #8
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	4613      	mov	r3, r2
 8000420:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d02e      	beq.n	800048a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800042c:	2100      	movs	r1, #0
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	fba3 2302 	umull	r2, r3, r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d000      	beq.n	800043c <xQueueGenericCreate+0x28>
 800043a:	2101      	movs	r1, #1
 800043c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800043e:	2b00      	cmp	r3, #0
 8000440:	d123      	bne.n	800048a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800044a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800044e:	d81c      	bhi.n	800048a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	3350      	adds	r3, #80	@ 0x50
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fafc 	bl	8002a5c <pvPortMalloc>
 8000464:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d01d      	beq.n	80004a8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3350      	adds	r3, #80	@ 0x50
 8000474:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	4613      	mov	r3, r2
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	68f8      	ldr	r0, [r7, #12]
 8000484:	f000 f815 	bl	80004b2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000488:	e00e      	b.n	80004a8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10b      	bne.n	80004a8 <xQueueGenericCreate+0x94>
        __asm volatile
 8000490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000494:	f383 8811 	msr	BASEPRI, r3
 8000498:	f3bf 8f6f 	isb	sy
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	613b      	str	r3, [r7, #16]
    }
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004a8:	69fb      	ldr	r3, [r7, #28]
    }
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
 80004be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d103      	bne.n	80004ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	69ba      	ldr	r2, [r7, #24]
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	e002      	b.n	80004d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004e0:	2101      	movs	r1, #1
 80004e2:	69b8      	ldr	r0, [r7, #24]
 80004e4:	f7ff ff04 	bl	80002f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	78fa      	ldrb	r2, [r7, #3]
 80004ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08e      	sub	sp, #56	@ 0x38
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000506:	2300      	movs	r3, #0
 8000508:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800050e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10b      	bne.n	800052c <xQueueGenericSend+0x34>
        __asm volatile
 8000514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d103      	bne.n	800053a <xQueueGenericSend+0x42>
 8000532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	2b00      	cmp	r3, #0
 8000538:	d101      	bne.n	800053e <xQueueGenericSend+0x46>
 800053a:	2301      	movs	r3, #1
 800053c:	e000      	b.n	8000540 <xQueueGenericSend+0x48>
 800053e:	2300      	movs	r3, #0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10b      	bne.n	800055c <xQueueGenericSend+0x64>
        __asm volatile
 8000544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000548:	f383 8811 	msr	BASEPRI, r3
 800054c:	f3bf 8f6f 	isb	sy
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d103      	bne.n	800056a <xQueueGenericSend+0x72>
 8000562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000566:	2b01      	cmp	r3, #1
 8000568:	d101      	bne.n	800056e <xQueueGenericSend+0x76>
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <xQueueGenericSend+0x78>
 800056e:	2300      	movs	r3, #0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10b      	bne.n	800058c <xQueueGenericSend+0x94>
        __asm volatile
 8000574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	623b      	str	r3, [r7, #32]
    }
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800058c:	f001 fb10 	bl	8001bb0 <xTaskGetSchedulerState>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d102      	bne.n	800059c <xQueueGenericSend+0xa4>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <xQueueGenericSend+0xa8>
 800059c:	2301      	movs	r3, #1
 800059e:	e000      	b.n	80005a2 <xQueueGenericSend+0xaa>
 80005a0:	2300      	movs	r3, #0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10b      	bne.n	80005be <xQueueGenericSend+0xc6>
        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	61fb      	str	r3, [r7, #28]
    }
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005be:	f002 f965 	bl	800288c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80005c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d302      	bcc.n	80005d4 <xQueueGenericSend+0xdc>
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d129      	bne.n	8000628 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80005da:	f000 fa89 	bl	8000af0 <prvCopyDataToQueue>
 80005de:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d010      	beq.n	800060a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ea:	3324      	adds	r3, #36	@ 0x24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f8cb 	bl	8001788 <xTaskRemoveFromEventList>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80005f8:	4b3f      	ldr	r3, [pc, #252]	@ (80006f8 <xQueueGenericSend+0x200>)
 80005fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	f3bf 8f6f 	isb	sy
 8000608:	e00a      	b.n	8000620 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800060a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800060c:	2b00      	cmp	r3, #0
 800060e:	d007      	beq.n	8000620 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000610:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <xQueueGenericSend+0x200>)
 8000612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000620:	f002 f966 	bl	80028f0 <vPortExitCritical>
                return pdPASS;
 8000624:	2301      	movs	r3, #1
 8000626:	e063      	b.n	80006f0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d103      	bne.n	8000636 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800062e:	f002 f95f 	bl	80028f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000632:	2300      	movs	r3, #0
 8000634:	e05c      	b.n	80006f0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f979 	bl	8001938 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000646:	2301      	movs	r3, #1
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800064a:	f002 f951 	bl	80028f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800064e:	f000 fda1 	bl	8001194 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000652:	f002 f91b 	bl	800288c <vPortEnterCritical>
 8000656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800065c:	b25b      	sxtb	r3, r3
 800065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000662:	d103      	bne.n	800066c <xQueueGenericSend+0x174>
 8000664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000672:	b25b      	sxtb	r3, r3
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d103      	bne.n	8000682 <xQueueGenericSend+0x18a>
 800067a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000682:	f002 f935 	bl	80028f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f968 	bl	8001964 <xTaskCheckForTimeOut>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d124      	bne.n	80006e4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800069a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800069c:	f000 fb20 	bl	8000ce0 <prvIsQueueFull>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d018      	beq.n	80006d8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006a8:	3310      	adds	r3, #16
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fffe 	bl	80016b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80006b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80006b6:	f000 faab 	bl	8000c10 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80006ba:	f000 fd79 	bl	80011b0 <xTaskResumeAll>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f47f af7c 	bne.w	80005be <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <xQueueGenericSend+0x200>)
 80006c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	e772      	b.n	80005be <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80006d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80006da:	f000 fa99 	bl	8000c10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006de:	f000 fd67 	bl	80011b0 <xTaskResumeAll>
 80006e2:	e76c      	b.n	80005be <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80006e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80006e6:	f000 fa93 	bl	8000c10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006ea:	f000 fd61 	bl	80011b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80006ee:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3738      	adds	r7, #56	@ 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	e000ed04 	.word	0xe000ed04

080006fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10b      	bne.n	800072e <xQueueReceive+0x32>
        __asm volatile
 8000716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800071a:	f383 8811 	msr	BASEPRI, r3
 800071e:	f3bf 8f6f 	isb	sy
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	623b      	str	r3, [r7, #32]
    }
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	e7fd      	b.n	800072a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <xQueueReceive+0x40>
 8000734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <xQueueReceive+0x44>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <xQueueReceive+0x46>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10b      	bne.n	800075e <xQueueReceive+0x62>
        __asm volatile
 8000746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	61fb      	str	r3, [r7, #28]
    }
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	e7fd      	b.n	800075a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800075e:	f001 fa27 	bl	8001bb0 <xTaskGetSchedulerState>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <xQueueReceive+0x72>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <xQueueReceive+0x76>
 800076e:	2301      	movs	r3, #1
 8000770:	e000      	b.n	8000774 <xQueueReceive+0x78>
 8000772:	2300      	movs	r3, #0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10b      	bne.n	8000790 <xQueueReceive+0x94>
        __asm volatile
 8000778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	61bb      	str	r3, [r7, #24]
    }
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000790:	f002 f87c 	bl	800288c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	2b00      	cmp	r3, #0
 800079e:	d01f      	beq.n	80007e0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80007a4:	f000 fa0e 	bl	8000bc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ae:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00f      	beq.n	80007d8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ba:	3310      	adds	r3, #16
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ffe3 	bl	8001788 <xTaskRemoveFromEventList>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d007      	beq.n	80007d8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007c8:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <xQueueReceive+0x1c0>)
 80007ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	f3bf 8f4f 	dsb	sy
 80007d4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80007d8:	f002 f88a 	bl	80028f0 <vPortExitCritical>
                return pdPASS;
 80007dc:	2301      	movs	r3, #1
 80007de:	e069      	b.n	80008b4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d103      	bne.n	80007ee <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80007e6:	f002 f883 	bl	80028f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e062      	b.n	80008b4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d106      	bne.n	8000802 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f89d 	bl	8001938 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007fe:	2301      	movs	r3, #1
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000802:	f002 f875 	bl	80028f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000806:	f000 fcc5 	bl	8001194 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800080a:	f002 f83f 	bl	800288c <vPortEnterCritical>
 800080e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000814:	b25b      	sxtb	r3, r3
 8000816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081a:	d103      	bne.n	8000824 <xQueueReceive+0x128>
 800081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800082a:	b25b      	sxtb	r3, r3
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d103      	bne.n	800083a <xQueueReceive+0x13e>
 8000832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800083a:	f002 f859 	bl	80028f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f88c 	bl	8001964 <xTaskCheckForTimeOut>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d123      	bne.n	800089a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000854:	f000 fa2e 	bl	8000cb4 <prvIsQueueEmpty>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d017      	beq.n	800088e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800085e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000860:	3324      	adds	r3, #36	@ 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ff22 	bl	80016b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800086c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800086e:	f000 f9cf 	bl	8000c10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000872:	f000 fc9d 	bl	80011b0 <xTaskResumeAll>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d189      	bne.n	8000790 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <xQueueReceive+0x1c0>)
 800087e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	e780      	b.n	8000790 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800088e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000890:	f000 f9be 	bl	8000c10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000894:	f000 fc8c 	bl	80011b0 <xTaskResumeAll>
 8000898:	e77a      	b.n	8000790 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800089a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800089c:	f000 f9b8 	bl	8000c10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008a0:	f000 fc86 	bl	80011b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80008a6:	f000 fa05 	bl	8000cb4 <prvIsQueueEmpty>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f43f af6f 	beq.w	8000790 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80008b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3730      	adds	r7, #48	@ 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	e000ed04 	.word	0xe000ed04

080008c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10b      	bne.n	80008f4 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	61bb      	str	r3, [r7, #24]
    }
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80008f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80008fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	617b      	str	r3, [r7, #20]
    }
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000914:	f001 f94c 	bl	8001bb0 <xTaskGetSchedulerState>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <xQueueSemaphoreTake+0x64>
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <xQueueSemaphoreTake+0x68>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <xQueueSemaphoreTake+0x6a>
 8000928:	2300      	movs	r3, #0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10b      	bne.n	8000946 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800092e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000932:	f383 8811 	msr	BASEPRI, r3
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	f3bf 8f4f 	dsb	sy
 800093e:	613b      	str	r3, [r7, #16]
    }
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	e7fd      	b.n	8000942 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000946:	f001 ffa1 	bl	800288c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800094e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d024      	beq.n	80009a0 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000966:	f001 fb3f 	bl	8001fe8 <pvTaskIncrementMutexHeldCount>
 800096a:	4602      	mov	r2, r0
 800096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000972:	691b      	ldr	r3, [r3, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00f      	beq.n	8000998 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097a:	3310      	adds	r3, #16
 800097c:	4618      	mov	r0, r3
 800097e:	f000 ff03 	bl	8001788 <xTaskRemoveFromEventList>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d007      	beq.n	8000998 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000988:	4b4c      	ldr	r3, [pc, #304]	@ (8000abc <xQueueSemaphoreTake+0x1fc>)
 800098a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000998:	f001 ffaa 	bl	80028f0 <vPortExitCritical>
                return pdPASS;
 800099c:	2301      	movs	r3, #1
 800099e:	e089      	b.n	8000ab4 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80009a6:	f001 ffa3 	bl	80028f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e082      	b.n	8000ab4 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d106      	bne.n	80009c2 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 ffbd 	bl	8001938 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009be:	2301      	movs	r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009c2:	f001 ff95 	bl	80028f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009c6:	f000 fbe5 	bl	8001194 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009ca:	f001 ff5f 	bl	800288c <vPortEnterCritical>
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009da:	d103      	bne.n	80009e4 <xQueueSemaphoreTake+0x124>
 80009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f0:	d103      	bne.n	80009fa <xQueueSemaphoreTake+0x13a>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80009fa:	f001 ff79 	bl	80028f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009fe:	463a      	mov	r2, r7
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 ffac 	bl	8001964 <xTaskCheckForTimeOut>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d132      	bne.n	8000a78 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a14:	f000 f94e 	bl	8000cb4 <prvIsQueueEmpty>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d026      	beq.n	8000a6c <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d109      	bne.n	8000a3a <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8000a26:	f001 ff31 	bl	800288c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f8dc 	bl	8001bec <xTaskPriorityInherit>
 8000a34:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8000a36:	f001 ff5b 	bl	80028f0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3c:	3324      	adds	r3, #36	@ 0x24
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fe34 	bl	80016b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a4a:	f000 f8e1 	bl	8000c10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a4e:	f000 fbaf 	bl	80011b0 <xTaskResumeAll>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f47f af76 	bne.w	8000946 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <xQueueSemaphoreTake+0x1fc>)
 8000a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	f3bf 8f6f 	isb	sy
 8000a6a:	e76c      	b.n	8000946 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000a6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a6e:	f000 f8cf 	bl	8000c10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a72:	f000 fb9d 	bl	80011b0 <xTaskResumeAll>
 8000a76:	e766      	b.n	8000946 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000a78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a7a:	f000 f8c9 	bl	8000c10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a7e:	f000 fb97 	bl	80011b0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a84:	f000 f916 	bl	8000cb4 <prvIsQueueEmpty>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f43f af5b 	beq.w	8000946 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00d      	beq.n	8000ab2 <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8000a96:	f001 fef9 	bl	800288c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000a9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a9c:	f000 f810 	bl	8000ac0 <prvGetDisinheritPriorityAfterTimeout>
 8000aa0:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	69f9      	ldr	r1, [r7, #28]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f9e3 	bl	8001e74 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000aae:	f001 ff1f 	bl	80028f0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000ab2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3730      	adds	r7, #48	@ 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	e000ed04 	.word	0xe000ed04

08000ac0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f1c3 0305 	rsb	r3, r3, #5
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e001      	b.n	8000ae2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    }
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b04:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10d      	bne.n	8000b2a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d14d      	bne.n	8000bb2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f904 	bl	8001d28 <xTaskPriorityDisinherit>
 8000b20:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	e043      	b.n	8000bb2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d119      	bne.n	8000b64 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6858      	ldr	r0, [r3, #4]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	f003 fa60 	bl	8004000 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	441a      	add	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d32b      	bcc.n	8000bb2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	e026      	b.n	8000bb2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	68d8      	ldr	r0, [r3, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	f003 fa46 	bl	8004000 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	441a      	add	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	425b      	negs	r3, r3
 8000b9a:	441a      	add	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d105      	bne.n	8000bb2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000bba:	697b      	ldr	r3, [r7, #20]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d018      	beq.n	8000c08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	441a      	add	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d303      	bcc.n	8000bf8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68d9      	ldr	r1, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	461a      	mov	r2, r3
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f003 f9fc 	bl	8004000 <memcpy>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c18:	f001 fe38 	bl	800288c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c24:	e011      	b.n	8000c4a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d012      	beq.n	8000c54 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3324      	adds	r3, #36	@ 0x24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fda8 	bl	8001788 <xTaskRemoveFromEventList>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000c3e:	f000 fef9 	bl	8001a34 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dce9      	bgt.n	8000c26 <prvUnlockQueue+0x16>
 8000c52:	e000      	b.n	8000c56 <prvUnlockQueue+0x46>
                    break;
 8000c54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	22ff      	movs	r2, #255	@ 0xff
 8000c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000c5e:	f001 fe47 	bl	80028f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000c62:	f001 fe13 	bl	800288c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c6e:	e011      	b.n	8000c94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d012      	beq.n	8000c9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3310      	adds	r3, #16
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fd83 	bl	8001788 <xTaskRemoveFromEventList>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000c88:	f000 fed4 	bl	8001a34 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dce9      	bgt.n	8000c70 <prvUnlockQueue+0x60>
 8000c9c:	e000      	b.n	8000ca0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000c9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	22ff      	movs	r2, #255	@ 0xff
 8000ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000ca8:	f001 fe22 	bl	80028f0 <vPortExitCritical>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000cbc:	f001 fde6 	bl	800288c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e001      	b.n	8000cd2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cd2:	f001 fe0d 	bl	80028f0 <vPortExitCritical>

    return xReturn;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ce8:	f001 fdd0 	bl	800288c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d102      	bne.n	8000cfe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e001      	b.n	8000d02 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000d02:	f001 fdf5 	bl	80028f0 <vPortExitCritical>

    return xReturn;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10b      	bne.n	8000d3c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8000d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	60fb      	str	r3, [r7, #12]
    }
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d024      	beq.n	8000d8c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e01e      	b.n	8000d86 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000d48:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <vQueueAddToRegistry+0x9c>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d105      	bne.n	8000d64 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <vQueueAddToRegistry+0x9c>)
 8000d5e:	4413      	add	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
                    break;
 8000d62:	e013      	b.n	8000d8c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <vQueueAddToRegistry+0x70>
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <vQueueAddToRegistry+0x9c>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d104      	bne.n	8000d80 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <vQueueAddToRegistry+0x9c>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d9dd      	bls.n	8000d48 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000d9e:	bf00      	nop
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000034 	.word	0x20000034

08000db0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000dc0:	f001 fd64 	bl	800288c <vPortEnterCritical>
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d103      	bne.n	8000dda <vQueueWaitForMessageRestricted+0x2a>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de6:	d103      	bne.n	8000df0 <vQueueWaitForMessageRestricted+0x40>
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000df0:	f001 fd7e 	bl	80028f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d106      	bne.n	8000e0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3324      	adds	r3, #36	@ 0x24
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fc79 	bl	80016fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff00 	bl	8000c10 <prvUnlockQueue>
    }
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af04      	add	r7, sp, #16
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fe15 	bl	8002a5c <pvPortMalloc>
 8000e32:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d013      	beq.n	8000e62 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e3a:	2058      	movs	r0, #88	@ 0x58
 8000e3c:	f001 fe0e 	bl	8002a5c <pvPortMalloc>
 8000e40:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000e48:	2258      	movs	r2, #88	@ 0x58
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	69f8      	ldr	r0, [r7, #28]
 8000e4e:	f003 f8aa 	bl	8003fa6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e58:	e005      	b.n	8000e66 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f001 feba 	bl	8002bd4 <vPortFree>
 8000e60:	e001      	b.n	8000e66 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f80e 	bl	8000ea4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e88:	69f8      	ldr	r0, [r7, #28]
 8000e8a:	f000 f89b 	bl	8000fc4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	e002      	b.n	8000e9a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000e9a:	69bb      	ldr	r3, [r7, #24]
    }
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	21a5      	movs	r1, #165	@ 0xa5
 8000ebe:	f003 f872 	bl	8003fa6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f023 0307 	bic.w	r3, r3, #7
 8000eda:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <prvInitialiseNewTask+0x5a>
        __asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	617b      	str	r3, [r7, #20]
    }
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	e7fd      	b.n	8000efa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d01e      	beq.n	8000f42 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	e012      	b.n	8000f30 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	4413      	add	r3, r2
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	4413      	add	r3, r2
 8000f18:	3334      	adds	r3, #52	@ 0x34
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	d9e9      	bls.n	8000f0a <prvInitialiseNewTask+0x66>
 8000f36:	e000      	b.n	8000f3a <prvInitialiseNewTask+0x96>
            {
                break;
 8000f38:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d90b      	bls.n	8000f60 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8000f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f4c:	f383 8811 	msr	BASEPRI, r3
 8000f50:	f3bf 8f6f 	isb	sy
 8000f54:	f3bf 8f4f 	dsb	sy
 8000f58:	613b      	str	r3, [r7, #16]
    }
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d901      	bls.n	8000f6a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f66:	2304      	movs	r3, #4
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f74:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f78:	3304      	adds	r3, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f948 	bl	8000210 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f82:	3318      	adds	r3, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f943 	bl	8000210 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f92:	f1c3 0205 	rsb	r2, r3, #5
 8000f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	69b8      	ldr	r0, [r7, #24]
 8000fa6:	f001 fb3f 	bl	8002628 <pxPortInitialiseStack>
 8000faa:	4602      	mov	r2, r0
 8000fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000fcc:	f001 fc5e 	bl	800288c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000fd0:	4b40      	ldr	r3, [pc, #256]	@ (80010d4 <prvAddNewTaskToReadyList+0x110>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80010d4 <prvAddNewTaskToReadyList+0x110>)
 8000fd8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000fda:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <prvAddNewTaskToReadyList+0x114>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80010d8 <prvAddNewTaskToReadyList+0x114>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80010d4 <prvAddNewTaskToReadyList+0x110>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d110      	bne.n	8001012 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ff0:	f000 fd44 	bl	8001a7c <prvInitialiseTaskLists>
 8000ff4:	e00d      	b.n	8001012 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ff6:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <prvAddNewTaskToReadyList+0x118>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ffe:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <prvAddNewTaskToReadyList+0x114>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001008:	429a      	cmp	r2, r3
 800100a:	d802      	bhi.n	8001012 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800100c:	4a32      	ldr	r2, [pc, #200]	@ (80010d8 <prvAddNewTaskToReadyList+0x114>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <prvAddNewTaskToReadyList+0x11c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a31      	ldr	r2, [pc, #196]	@ (80010e0 <prvAddNewTaskToReadyList+0x11c>)
 800101a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800101c:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <prvAddNewTaskToReadyList+0x11c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001028:	2201      	movs	r2, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <prvAddNewTaskToReadyList+0x120>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4313      	orrs	r3, r2
 8001032:	4a2c      	ldr	r2, [pc, #176]	@ (80010e4 <prvAddNewTaskToReadyList+0x120>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103a:	492b      	ldr	r1, [pc, #172]	@ (80010e8 <prvAddNewTaskToReadyList+0x124>)
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3304      	adds	r3, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	3204      	adds	r2, #4
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1d1a      	adds	r2, r3, #4
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <prvAddNewTaskToReadyList+0x124>)
 800107a:	441a      	add	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001084:	4918      	ldr	r1, [pc, #96]	@ (80010e8 <prvAddNewTaskToReadyList+0x124>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1c59      	adds	r1, r3, #1
 8001094:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <prvAddNewTaskToReadyList+0x124>)
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4403      	add	r3, r0
 80010a0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80010a2:	f001 fc25 	bl	80028f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <prvAddNewTaskToReadyList+0x118>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00e      	beq.n	80010cc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <prvAddNewTaskToReadyList+0x114>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <prvAddNewTaskToReadyList+0x128>)
 80010be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	f3bf 8f4f 	dsb	sy
 80010c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000014c 	.word	0x2000014c
 80010d8:	20000074 	.word	0x20000074
 80010dc:	20000158 	.word	0x20000158
 80010e0:	20000168 	.word	0x20000168
 80010e4:	20000154 	.word	0x20000154
 80010e8:	20000078 	.word	0x20000078
 80010ec:	e000ed04 	.word	0xe000ed04

080010f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <vTaskStartScheduler+0x88>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2282      	movs	r2, #130	@ 0x82
 8001102:	491e      	ldr	r1, [pc, #120]	@ (800117c <vTaskStartScheduler+0x8c>)
 8001104:	481e      	ldr	r0, [pc, #120]	@ (8001180 <vTaskStartScheduler+0x90>)
 8001106:	f7ff fe87 	bl	8000e18 <xTaskCreate>
 800110a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001112:	f000 fffd 	bl	8002110 <xTimerCreateTimerTask>
 8001116:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d116      	bne.n	800114c <vTaskStartScheduler+0x5c>
        __asm volatile
 800111e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001122:	f383 8811 	msr	BASEPRI, r3
 8001126:	f3bf 8f6f 	isb	sy
 800112a:	f3bf 8f4f 	dsb	sy
 800112e:	60bb      	str	r3, [r7, #8]
    }
 8001130:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <vTaskStartScheduler+0x94>)
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <vTaskStartScheduler+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <vTaskStartScheduler+0x9c>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001146:	f001 fafd 	bl	8002744 <xPortStartScheduler>
 800114a:	e00f      	b.n	800116c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001152:	d10b      	bne.n	800116c <vTaskStartScheduler+0x7c>
        __asm volatile
 8001154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001158:	f383 8811 	msr	BASEPRI, r3
 800115c:	f3bf 8f6f 	isb	sy
 8001160:	f3bf 8f4f 	dsb	sy
 8001164:	607b      	str	r3, [r7, #4]
    }
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <vTaskStartScheduler+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000170 	.word	0x20000170
 800117c:	08004034 	.word	0x08004034
 8001180:	08001a4d 	.word	0x08001a4d
 8001184:	2000016c 	.word	0x2000016c
 8001188:	20000158 	.word	0x20000158
 800118c:	20000150 	.word	0x20000150
 8001190:	20000000 	.word	0x20000000

08001194 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <vTaskSuspendAll+0x18>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <vTaskSuspendAll+0x18>)
 80011a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000174 	.word	0x20000174

080011b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80011be:	4b71      	ldr	r3, [pc, #452]	@ (8001384 <xTaskResumeAll+0x1d4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <xTaskResumeAll+0x2e>
        __asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	607b      	str	r3, [r7, #4]
    }
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011de:	f001 fb55 	bl	800288c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011e2:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <xTaskResumeAll+0x1d4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4a66      	ldr	r2, [pc, #408]	@ (8001384 <xTaskResumeAll+0x1d4>)
 80011ea:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011ec:	4b65      	ldr	r3, [pc, #404]	@ (8001384 <xTaskResumeAll+0x1d4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 80c0 	bne.w	8001376 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <xTaskResumeAll+0x1d8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80bb 	beq.w	8001376 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001200:	e08a      	b.n	8001318 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001202:	4b62      	ldr	r3, [pc, #392]	@ (800138c <xTaskResumeAll+0x1dc>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	6a12      	ldr	r2, [r2, #32]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	69d2      	ldr	r2, [r2, #28]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3318      	adds	r3, #24
 800122c:	429a      	cmp	r2, r3
 800122e:	d103      	bne.n	8001238 <xTaskResumeAll+0x88>
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1e5a      	subs	r2, r3, #1
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	68d2      	ldr	r2, [r2, #12]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	6892      	ldr	r2, [r2, #8]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	429a      	cmp	r2, r3
 800126c:	d103      	bne.n	8001276 <xTaskResumeAll+0xc6>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128a:	2201      	movs	r2, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <xTaskResumeAll+0x1e0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	4a3e      	ldr	r2, [pc, #248]	@ (8001390 <xTaskResumeAll+0x1e0>)
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800129c:	493d      	ldr	r1, [pc, #244]	@ (8001394 <xTaskResumeAll+0x1e4>)
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3304      	adds	r3, #4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	3204      	adds	r2, #4
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	1d1a      	adds	r2, r3, #4
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4a2e      	ldr	r2, [pc, #184]	@ (8001394 <xTaskResumeAll+0x1e4>)
 80012dc:	441a      	add	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e6:	492b      	ldr	r1, [pc, #172]	@ (8001394 <xTaskResumeAll+0x1e4>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	4827      	ldr	r0, [pc, #156]	@ (8001394 <xTaskResumeAll+0x1e4>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4403      	add	r3, r0
 8001302:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <xTaskResumeAll+0x1e8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130e:	429a      	cmp	r2, r3
 8001310:	d302      	bcc.n	8001318 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <xTaskResumeAll+0x1ec>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <xTaskResumeAll+0x1dc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f47f af70 	bne.w	8001202 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001328:	f000 fc26 	bl	8001b78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <xTaskResumeAll+0x1f0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001338:	f000 f846 	bl	80013c8 <xTaskIncrementTick>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <xTaskResumeAll+0x1ec>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3b01      	subs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f1      	bne.n	8001338 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <xTaskResumeAll+0x1f0>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <xTaskResumeAll+0x1ec>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <xTaskResumeAll+0x1f4>)
 8001368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001376:	f001 fabb 	bl	80028f0 <vPortExitCritical>

    return xAlreadyYielded;
 800137a:	69bb      	ldr	r3, [r7, #24]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000174 	.word	0x20000174
 8001388:	2000014c 	.word	0x2000014c
 800138c:	2000010c 	.word	0x2000010c
 8001390:	20000154 	.word	0x20000154
 8001394:	20000078 	.word	0x20000078
 8001398:	20000074 	.word	0x20000074
 800139c:	20000160 	.word	0x20000160
 80013a0:	2000015c 	.word	0x2000015c
 80013a4:	e000ed04 	.word	0xe000ed04

080013a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <xTaskGetTickCount+0x1c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000150 	.word	0x20000150

080013c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013d2:	4b7e      	ldr	r3, [pc, #504]	@ (80015cc <xTaskIncrementTick+0x204>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80ed 	bne.w	80015b6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013dc:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <xTaskIncrementTick+0x208>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013e4:	4a7a      	ldr	r2, [pc, #488]	@ (80015d0 <xTaskIncrementTick+0x208>)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d121      	bne.n	8001434 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80013f0:	4b78      	ldr	r3, [pc, #480]	@ (80015d4 <xTaskIncrementTick+0x20c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <xTaskIncrementTick+0x4a>
        __asm volatile
 80013fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	607b      	str	r3, [r7, #4]
    }
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	e7fd      	b.n	800140e <xTaskIncrementTick+0x46>
 8001412:	4b70      	ldr	r3, [pc, #448]	@ (80015d4 <xTaskIncrementTick+0x20c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <xTaskIncrementTick+0x210>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6d      	ldr	r2, [pc, #436]	@ (80015d4 <xTaskIncrementTick+0x20c>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4a6d      	ldr	r2, [pc, #436]	@ (80015d8 <xTaskIncrementTick+0x210>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	@ (80015dc <xTaskIncrementTick+0x214>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a6b      	ldr	r2, [pc, #428]	@ (80015dc <xTaskIncrementTick+0x214>)
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	f000 fba2 	bl	8001b78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001434:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <xTaskIncrementTick+0x218>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	429a      	cmp	r2, r3
 800143c:	f0c0 80a6 	bcc.w	800158c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001440:	4b64      	ldr	r3, [pc, #400]	@ (80015d4 <xTaskIncrementTick+0x20c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800144a:	4b65      	ldr	r3, [pc, #404]	@ (80015e0 <xTaskIncrementTick+0x218>)
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	601a      	str	r2, [r3, #0]
                    break;
 8001452:	e09b      	b.n	800158c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001454:	4b5f      	ldr	r3, [pc, #380]	@ (80015d4 <xTaskIncrementTick+0x20c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	d203      	bcs.n	8001474 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800146c:	4a5c      	ldr	r2, [pc, #368]	@ (80015e0 <xTaskIncrementTick+0x218>)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001472:	e08b      	b.n	800158c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	6892      	ldr	r2, [r2, #8]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3304      	adds	r3, #4
 8001496:	429a      	cmp	r2, r3
 8001498:	d103      	bne.n	80014a2 <xTaskIncrementTick+0xda>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01e      	beq.n	80014f8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	6a12      	ldr	r2, [r2, #32]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	69d2      	ldr	r2, [r2, #28]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3318      	adds	r3, #24
 80014dc:	429a      	cmp	r2, r3
 80014de:	d103      	bne.n	80014e8 <xTaskIncrementTick+0x120>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2200      	movs	r2, #0
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <xTaskIncrementTick+0x21c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4313      	orrs	r3, r2
 8001506:	4a37      	ldr	r2, [pc, #220]	@ (80015e4 <xTaskIncrementTick+0x21c>)
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150e:	4936      	ldr	r1, [pc, #216]	@ (80015e8 <xTaskIncrementTick+0x220>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	3204      	adds	r2, #4
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1d1a      	adds	r2, r3, #4
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <xTaskIncrementTick+0x220>)
 800154e:	441a      	add	r2, r3
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	4923      	ldr	r1, [pc, #140]	@ (80015e8 <xTaskIncrementTick+0x220>)
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	481f      	ldr	r0, [pc, #124]	@ (80015e8 <xTaskIncrementTick+0x220>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4403      	add	r3, r0
 8001574:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <xTaskIncrementTick+0x224>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	429a      	cmp	r2, r3
 8001582:	f67f af5d 	bls.w	8001440 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800158a:	e759      	b.n	8001440 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <xTaskIncrementTick+0x224>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001592:	4915      	ldr	r1, [pc, #84]	@ (80015e8 <xTaskIncrementTick+0x220>)
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d901      	bls.n	80015a8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <xTaskIncrementTick+0x228>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	e004      	b.n	80015c0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <xTaskIncrementTick+0x22c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <xTaskIncrementTick+0x22c>)
 80015be:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000174 	.word	0x20000174
 80015d0:	20000150 	.word	0x20000150
 80015d4:	20000104 	.word	0x20000104
 80015d8:	20000108 	.word	0x20000108
 80015dc:	20000164 	.word	0x20000164
 80015e0:	2000016c 	.word	0x2000016c
 80015e4:	20000154 	.word	0x20000154
 80015e8:	20000078 	.word	0x20000078
 80015ec:	20000074 	.word	0x20000074
 80015f0:	20000160 	.word	0x20000160
 80015f4:	2000015c 	.word	0x2000015c

080015f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <vTaskSwitchContext+0xa4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <vTaskSwitchContext+0xa8>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800160c:	e040      	b.n	8001690 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <vTaskSwitchContext+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <vTaskSwitchContext+0xac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	f1c3 031f 	rsb	r3, r3, #31
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	491f      	ldr	r1, [pc, #124]	@ (80016a8 <vTaskSwitchContext+0xb0>)
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10b      	bne.n	8001656 <vTaskSwitchContext+0x5e>
        __asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	607b      	str	r3, [r7, #4]
    }
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <vTaskSwitchContext+0x5a>
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <vTaskSwitchContext+0xb0>)
 8001662:	4413      	add	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	3308      	adds	r3, #8
 8001678:	429a      	cmp	r2, r3
 800167a:	d104      	bne.n	8001686 <vTaskSwitchContext+0x8e>
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <vTaskSwitchContext+0xb4>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000174 	.word	0x20000174
 80016a0:	20000160 	.word	0x20000160
 80016a4:	20000154 	.word	0x20000154
 80016a8:	20000078 	.word	0x20000078
 80016ac:	20000074 	.word	0x20000074

080016b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10b      	bne.n	80016d8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80016c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c4:	f383 8811 	msr	BASEPRI, r3
 80016c8:	f3bf 8f6f 	isb	sy
 80016cc:	f3bf 8f4f 	dsb	sy
 80016d0:	60fb      	str	r3, [r7, #12]
    }
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <vTaskPlaceOnEventList+0x48>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3318      	adds	r3, #24
 80016de:	4619      	mov	r1, r3
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fda2 	bl	800022a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016e6:	2101      	movs	r1, #1
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f000 fc91 	bl	8002010 <prvAddCurrentTaskToDelayedList>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000074 	.word	0x20000074

080016fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10b      	bne.n	8001726 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800170e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	613b      	str	r3, [r7, #16]
    }
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	e7fd      	b.n	8001722 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <vTaskPlaceOnEventListRestricted+0x88>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	61da      	str	r2, [r3, #28]
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <vTaskPlaceOnEventListRestricted+0x88>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	6892      	ldr	r2, [r2, #8]
 800173c:	621a      	str	r2, [r3, #32]
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <vTaskPlaceOnEventListRestricted+0x88>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	3218      	adds	r2, #24
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <vTaskPlaceOnEventListRestricted+0x88>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f103 0218 	add.w	r2, r3, #24
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <vTaskPlaceOnEventListRestricted+0x88>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f000 fc4a 	bl	8002010 <prvAddCurrentTaskToDelayedList>
    }
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000074 	.word	0x20000074

08001788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	@ 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10b      	bne.n	80017b6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800179e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	60fb      	str	r3, [r7, #12]
    }
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	6a12      	ldr	r2, [r2, #32]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	69d2      	ldr	r2, [r2, #28]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	3318      	adds	r3, #24
 80017d8:	429a      	cmp	r2, r3
 80017da:	d103      	bne.n	80017e4 <xTaskRemoveFromEventList+0x5c>
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001920 <xTaskRemoveFromEventList+0x198>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d15e      	bne.n	80018ba <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	6a3a      	ldr	r2, [r7, #32]
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	6892      	ldr	r2, [r2, #8]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	3304      	adds	r3, #4
 800181e:	429a      	cmp	r2, r3
 8001820:	d103      	bne.n	800182a <xTaskRemoveFromEventList+0xa2>
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <xTaskRemoveFromEventList+0x19c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	4a36      	ldr	r2, [pc, #216]	@ (8001924 <xTaskRemoveFromEventList+0x19c>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001850:	4935      	ldr	r1, [pc, #212]	@ (8001928 <xTaskRemoveFromEventList+0x1a0>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3304      	adds	r3, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	6a3a      	ldr	r2, [r7, #32]
 8001876:	3204      	adds	r2, #4
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	1d1a      	adds	r2, r3, #4
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4a26      	ldr	r2, [pc, #152]	@ (8001928 <xTaskRemoveFromEventList+0x1a0>)
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189a:	4923      	ldr	r1, [pc, #140]	@ (8001928 <xTaskRemoveFromEventList+0x1a0>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	1c59      	adds	r1, r3, #1
 80018aa:	481f      	ldr	r0, [pc, #124]	@ (8001928 <xTaskRemoveFromEventList+0x1a0>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4403      	add	r3, r0
 80018b6:	6019      	str	r1, [r3, #0]
 80018b8:	e01b      	b.n	80018f2 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <xTaskRemoveFromEventList+0x1a4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	61da      	str	r2, [r3, #28]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	6a3a      	ldr	r2, [r7, #32]
 80018d4:	3218      	adds	r2, #24
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f103 0218 	add.w	r2, r3, #24
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	4a11      	ldr	r2, [pc, #68]	@ (800192c <xTaskRemoveFromEventList+0x1a4>)
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <xTaskRemoveFromEventList+0x1a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <xTaskRemoveFromEventList+0x1a4>)
 80018f0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <xTaskRemoveFromEventList+0x1a8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d905      	bls.n	800190c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <xTaskRemoveFromEventList+0x1ac>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e001      	b.n	8001910 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001912:	4618      	mov	r0, r3
 8001914:	372c      	adds	r7, #44	@ 0x2c
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000174 	.word	0x20000174
 8001924:	20000154 	.word	0x20000154
 8001928:	20000078 	.word	0x20000078
 800192c:	2000010c 	.word	0x2000010c
 8001930:	20000074 	.word	0x20000074
 8001934:	20000160 	.word	0x20000160

08001938 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <vTaskInternalSetTimeOutState+0x24>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <vTaskInternalSetTimeOutState+0x28>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000164 	.word	0x20000164
 8001960:	20000150 	.word	0x20000150

08001964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10b      	bne.n	800198c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8001974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001978:	f383 8811 	msr	BASEPRI, r3
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	613b      	str	r3, [r7, #16]
    }
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10b      	bne.n	80019aa <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001996:	f383 8811 	msr	BASEPRI, r3
 800199a:	f3bf 8f6f 	isb	sy
 800199e:	f3bf 8f4f 	dsb	sy
 80019a2:	60fb      	str	r3, [r7, #12]
    }
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	e7fd      	b.n	80019a6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80019aa:	f000 ff6f 	bl	800288c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <xTaskCheckForTimeOut+0xc8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d102      	bne.n	80019ce <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e026      	b.n	8001a1c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <xTaskCheckForTimeOut+0xcc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d00a      	beq.n	80019f0 <xTaskCheckForTimeOut+0x8c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d305      	bcc.n	80019f0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e015      	b.n	8001a1c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d20b      	bcs.n	8001a12 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	1ad2      	subs	r2, r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff96 	bl	8001938 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e004      	b.n	8001a1c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a1c:	f000 ff68 	bl	80028f0 <vPortExitCritical>

    return xReturn;
 8001a20:	69fb      	ldr	r3, [r7, #28]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000150 	.word	0x20000150
 8001a30:	20000164 	.word	0x20000164

08001a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <vTaskMissedYield+0x14>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000160 	.word	0x20000160

08001a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001a54:	f000 f852 	bl	8001afc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <prvIdleTask+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d9f9      	bls.n	8001a54 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <prvIdleTask+0x2c>)
 8001a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001a70:	e7f0      	b.n	8001a54 <prvIdleTask+0x8>
 8001a72:	bf00      	nop
 8001a74:	20000078 	.word	0x20000078
 8001a78:	e000ed04 	.word	0xe000ed04

08001a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e00c      	b.n	8001aa2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <prvInitialiseTaskLists+0x60>)
 8001a94:	4413      	add	r3, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fb9a 	bl	80001d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d9ef      	bls.n	8001a88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <prvInitialiseTaskLists+0x64>)
 8001aaa:	f7fe fb91 	bl	80001d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <prvInitialiseTaskLists+0x68>)
 8001ab0:	f7fe fb8e 	bl	80001d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <prvInitialiseTaskLists+0x6c>)
 8001ab6:	f7fe fb8b 	bl	80001d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001aba:	480c      	ldr	r0, [pc, #48]	@ (8001aec <prvInitialiseTaskLists+0x70>)
 8001abc:	f7fe fb88 	bl	80001d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ac0:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <prvInitialiseTaskLists+0x74>)
 8001ac2:	f7fe fb85 	bl	80001d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <prvInitialiseTaskLists+0x78>)
 8001ac8:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <prvInitialiseTaskLists+0x64>)
 8001aca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <prvInitialiseTaskLists+0x7c>)
 8001ace:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <prvInitialiseTaskLists+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000078 	.word	0x20000078
 8001ae0:	200000dc 	.word	0x200000dc
 8001ae4:	200000f0 	.word	0x200000f0
 8001ae8:	2000010c 	.word	0x2000010c
 8001aec:	20000120 	.word	0x20000120
 8001af0:	20000138 	.word	0x20000138
 8001af4:	20000104 	.word	0x20000104
 8001af8:	20000108 	.word	0x20000108

08001afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b02:	e019      	b.n	8001b38 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001b04:	f000 fec2 	bl	800288c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <prvCheckTasksWaitingTermination+0x50>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbc1 	bl	800029c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <prvCheckTasksWaitingTermination+0x54>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <prvCheckTasksWaitingTermination+0x54>)
 8001b22:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <prvCheckTasksWaitingTermination+0x58>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <prvCheckTasksWaitingTermination+0x58>)
 8001b2c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001b2e:	f000 fedf 	bl	80028f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f810 	bl	8001b58 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <prvCheckTasksWaitingTermination+0x58>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e1      	bne.n	8001b04 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000120 	.word	0x20000120
 8001b50:	2000014c 	.word	0x2000014c
 8001b54:	20000134 	.word	0x20000134

08001b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f835 	bl	8002bd4 <vPortFree>
            vPortFree( pxTCB );
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f001 f832 	bl	8002bd4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <prvResetNextTaskUnblockTime+0x30>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <prvResetNextTaskUnblockTime+0x34>)
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001b8e:	e005      	b.n	8001b9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <prvResetNextTaskUnblockTime+0x30>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <prvResetNextTaskUnblockTime+0x34>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000104 	.word	0x20000104
 8001bac:	2000016c 	.word	0x2000016c

08001bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <xTaskGetSchedulerState+0x34>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e008      	b.n	8001bd6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <xTaskGetSchedulerState+0x38>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	e001      	b.n	8001bd6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001bd6:	687b      	ldr	r3, [r7, #4]
    }
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000158 	.word	0x20000158
 8001be8:	20000174 	.word	0x20000174

08001bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c08:	4b44      	ldr	r3, [pc, #272]	@ (8001d1c <xTaskPriorityInherit+0x130>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d276      	bcs.n	8001d00 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db06      	blt.n	8001c28 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c1a:	4b40      	ldr	r3, [pc, #256]	@ (8001d1c <xTaskPriorityInherit+0x130>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	f1c3 0205 	rsb	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6959      	ldr	r1, [r3, #20]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4a39      	ldr	r2, [pc, #228]	@ (8001d20 <xTaskPriorityInherit+0x134>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d157      	bne.n	8001cf0 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	3304      	adds	r3, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fb29 	bl	800029c <uxListRemove>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <xTaskPriorityInherit+0x138>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4013      	ands	r3, r2
 8001c62:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <xTaskPriorityInherit+0x138>)
 8001c64:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <xTaskPriorityInherit+0x130>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	2201      	movs	r2, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <xTaskPriorityInherit+0x138>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <xTaskPriorityInherit+0x138>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c86:	4926      	ldr	r1, [pc, #152]	@ (8001d20 <xTaskPriorityInherit+0x134>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3304      	adds	r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	3204      	adds	r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1d1a      	adds	r2, r3, #4
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <xTaskPriorityInherit+0x134>)
 8001cc6:	441a      	add	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd0:	4913      	ldr	r1, [pc, #76]	@ (8001d20 <xTaskPriorityInherit+0x134>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	480f      	ldr	r0, [pc, #60]	@ (8001d20 <xTaskPriorityInherit+0x134>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4403      	add	r3, r0
 8001cec:	6019      	str	r1, [r3, #0]
 8001cee:	e004      	b.n	8001cfa <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <xTaskPriorityInherit+0x130>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e008      	b.n	8001d12 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <xTaskPriorityInherit+0x130>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d201      	bcs.n	8001d12 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d12:	697b      	ldr	r3, [r7, #20]
    }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000074 	.word	0x20000074
 8001d20:	20000078 	.word	0x20000078
 8001d24:	20000154 	.word	0x20000154

08001d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 808e 	beq.w	8001e5c <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d40:	4b49      	ldr	r3, [pc, #292]	@ (8001e68 <xTaskPriorityDisinherit+0x140>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d00b      	beq.n	8001d62 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	613b      	str	r3, [r7, #16]
    }
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8001d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	60fb      	str	r3, [r7, #12]
    }
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d061      	beq.n	8001e5c <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d15d      	bne.n	8001e5c <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fa79 	bl	800029c <uxListRemove>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <xTaskPriorityDisinherit+0x144>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <xTaskPriorityDisinherit+0x144>)
 8001dc4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd2:	f1c3 0205 	rsb	r2, r3, #5
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <xTaskPriorityDisinherit+0x144>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <xTaskPriorityDisinherit+0x144>)
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df0:	491f      	ldr	r1, [pc, #124]	@ (8001e70 <xTaskPriorityDisinherit+0x148>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	3204      	adds	r2, #4
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1d1a      	adds	r2, r3, #4
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <xTaskPriorityDisinherit+0x148>)
 8001e30:	441a      	add	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <xTaskPriorityDisinherit+0x148>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c59      	adds	r1, r3, #1
 8001e4a:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <xTaskPriorityDisinherit+0x148>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
    }
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000074 	.word	0x20000074
 8001e6c:	20000154 	.word	0x20000154
 8001e70:	20000078 	.word	0x20000078

08001e74 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a3 	beq.w	8001fd4 <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	613b      	str	r3, [r7, #16]
    }
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d902      	bls.n	8001ebe <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebc:	e002      	b.n	8001ec4 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	f000 8082 	beq.w	8001fd4 <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d17c      	bne.n	8001fd4 <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d10b      	bne.n	8001efc <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	60fb      	str	r3, [r7, #12]
    }
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db04      	blt.n	8001f1a <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	f1c3 0205 	rsb	r2, r3, #5
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4299      	cmp	r1, r3
 8001f2e:	d151      	bne.n	8001fd4 <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f9b1 	bl	800029c <uxListRemove>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	2201      	movs	r2, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4013      	ands	r3, r2
 8001f52:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8001f54:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe4 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6c:	491c      	ldr	r1, [pc, #112]	@ (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3304      	adds	r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	3204      	adds	r2, #4
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	1d1a      	adds	r2, r3, #4
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001fac:	441a      	add	r2, r3
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	615a      	str	r2, [r3, #20]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb6:	490a      	ldr	r1, [pc, #40]	@ (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4403      	add	r3, r0
 8001fd2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000074 	.word	0x20000074
 8001fe0:	20000078 	.word	0x20000078
 8001fe4:	20000154 	.word	0x20000154

08001fe8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <pvTaskIncrementMutexHeldCount+0x24>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <pvTaskIncrementMutexHeldCount+0x24>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ffa:	3201      	adds	r2, #1
 8001ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8001ffe:	4b03      	ldr	r3, [pc, #12]	@ (800200c <pvTaskIncrementMutexHeldCount+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
    }
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000074 	.word	0x20000074

08002010 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800201a:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002020:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f938 	bl	800029c <uxListRemove>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002032:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	2201      	movs	r2, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <prvAddCurrentTaskToDelayedList+0xec>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4013      	ands	r3, r2
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <prvAddCurrentTaskToDelayedList+0xec>)
 8002048:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d124      	bne.n	800209c <prvAddCurrentTaskToDelayedList+0x8c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d021      	beq.n	800209c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002058:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <prvAddCurrentTaskToDelayedList+0xf0>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b26      	ldr	r3, [pc, #152]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	3204      	adds	r2, #4
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1d1a      	adds	r2, r3, #4
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1d      	ldr	r2, [pc, #116]	@ (8002100 <prvAddCurrentTaskToDelayedList+0xf0>)
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a1a      	ldr	r2, [pc, #104]	@ (8002100 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800209a:	e026      	b.n	80020ea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020a4:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d209      	bcs.n	80020c8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <prvAddCurrentTaskToDelayedList+0xf4>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3304      	adds	r3, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe f8b2 	bl	800022a <vListInsert>
}
 80020c6:	e010      	b.n	80020ea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <prvAddCurrentTaskToDelayedList+0xf8>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3304      	adds	r3, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f7fe f8a8 	bl	800022a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80020da:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <prvAddCurrentTaskToDelayedList+0xfc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d202      	bcs.n	80020ea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80020e4:	4a09      	ldr	r2, [pc, #36]	@ (800210c <prvAddCurrentTaskToDelayedList+0xfc>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000150 	.word	0x20000150
 80020f8:	20000074 	.word	0x20000074
 80020fc:	20000154 	.word	0x20000154
 8002100:	20000138 	.word	0x20000138
 8002104:	20000108 	.word	0x20000108
 8002108:	20000104 	.word	0x20000104
 800210c:	2000016c 	.word	0x2000016c

08002110 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800211a:	f000 fa4f 	bl	80025bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <xTimerCreateTimerTask+0x58>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <xTimerCreateTimerTask+0x5c>)
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2302      	movs	r3, #2
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002134:	490e      	ldr	r1, [pc, #56]	@ (8002170 <xTimerCreateTimerTask+0x60>)
 8002136:	480f      	ldr	r0, [pc, #60]	@ (8002174 <xTimerCreateTimerTask+0x64>)
 8002138:	f7fe fe6e 	bl	8000e18 <xTaskCreate>
 800213c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	603b      	str	r3, [r7, #0]
    }
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800215c:	687b      	ldr	r3, [r7, #4]
    }
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200001a8 	.word	0x200001a8
 800216c:	200001ac 	.word	0x200001ac
 8002170:	0800403c 	.word	0x0800403c
 8002174:	0800221d 	.word	0x0800221d

08002178 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002184:	e008      	b.n	8002198 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	18d1      	adds	r1, r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f8df 	bl	8002368 <prvInsertTimerInActiveList>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ea      	bne.n	8002186 <prvReloadTimer+0xe>
        }
    }
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <prvProcessExpiredTimer+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f861 	bl	800029c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ffc3 	bl	8002178 <prvReloadTimer>
 80021f2:	e008      	b.n	8002206 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	4798      	blx	r3
    }
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200001a0 	.word	0x200001a0

0800221c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f859 	bl	80022e0 <prvGetNextExpireTime>
 800222e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4619      	mov	r1, r3
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f805 	bl	8002244 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800223a:	f000 f8d7 	bl	80023ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800223e:	bf00      	nop
 8002240:	e7f0      	b.n	8002224 <prvTimerTask+0x8>
	...

08002244 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800224e:	f7fe ffa1 	bl	8001194 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f866 	bl	8002328 <prvSampleTimeNow>
 800225c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d130      	bne.n	80022c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <prvProcessTimerOrBlockTask+0x3c>
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	429a      	cmp	r2, r3
 8002270:	d806      	bhi.n	8002280 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002272:	f7fe ff9d 	bl	80011b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff9f 	bl	80021bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800227e:	e024      	b.n	80022ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <prvProcessTimerOrBlockTask+0x90>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <prvProcessTimerOrBlockTask+0x50>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <prvProcessTimerOrBlockTask+0x52>
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <prvProcessTimerOrBlockTask+0x94>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe fd83 	bl	8000db0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80022aa:	f7fe ff81 	bl	80011b0 <xTaskResumeAll>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <prvProcessTimerOrBlockTask+0x98>)
 80022b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	f3bf 8f6f 	isb	sy
    }
 80022c4:	e001      	b.n	80022ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80022c6:	f7fe ff73 	bl	80011b0 <xTaskResumeAll>
    }
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001a4 	.word	0x200001a4
 80022d8:	200001a8 	.word	0x200001a8
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <prvGetNextExpireTime+0x44>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <prvGetNextExpireTime+0x16>
 80022f2:	2201      	movs	r2, #1
 80022f4:	e000      	b.n	80022f8 <prvGetNextExpireTime+0x18>
 80022f6:	2200      	movs	r2, #0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002304:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <prvGetNextExpireTime+0x44>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e001      	b.n	8002314 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002314:	68fb      	ldr	r3, [r7, #12]
    }
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200001a0 	.word	0x200001a0

08002328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002330:	f7ff f83a 	bl	80013a8 <xTaskGetTickCount>
 8002334:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002336:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <prvSampleTimeNow+0x3c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d205      	bcs.n	800234c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002340:	f000 f916 	bl	8002570 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e002      	b.n	8002352 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002352:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <prvSampleTimeNow+0x3c>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002358:	68fb      	ldr	r3, [r7, #12]
    }
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200001b0 	.word	0x200001b0

08002368 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d812      	bhi.n	80023b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d302      	bcc.n	80023a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800239c:	2301      	movs	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e01b      	b.n	80023da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <prvInsertTimerInActiveList+0x7c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3304      	adds	r3, #4
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fd ff3c 	bl	800022a <vListInsert>
 80023b2:	e012      	b.n	80023da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d206      	bcs.n	80023ca <prvInsertTimerInActiveList+0x62>
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e007      	b.n	80023da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <prvInsertTimerInActiveList+0x80>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7fd ff28 	bl	800022a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80023da:	697b      	ldr	r3, [r7, #20]
    }
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200001a4 	.word	0x200001a4
 80023e8:	200001a0 	.word	0x200001a0

080023ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023f2:	e0a9      	b.n	8002548 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f2c0 80a6 	blt.w	8002548 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3304      	adds	r3, #4
 800240c:	4618      	mov	r0, r3
 800240e:	f7fd ff45 	bl	800029c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff87 	bl	8002328 <prvSampleTimeNow>
 800241a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	3b01      	subs	r3, #1
 8002420:	2b08      	cmp	r3, #8
 8002422:	f200 808e 	bhi.w	8002542 <prvProcessReceivedCommands+0x156>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <prvProcessReceivedCommands+0x40>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	08002451 	.word	0x08002451
 8002430:	08002451 	.word	0x08002451
 8002434:	080024b9 	.word	0x080024b9
 8002438:	080024cd 	.word	0x080024cd
 800243c:	08002519 	.word	0x08002519
 8002440:	08002451 	.word	0x08002451
 8002444:	08002451 	.word	0x08002451
 8002448:	080024b9 	.word	0x080024b9
 800244c:	080024cd 	.word	0x080024cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	18d1      	adds	r1, r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7ff ff7a 	bl	8002368 <prvInsertTimerInActiveList>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d065      	beq.n	8002546 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4413      	add	r3, r2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4619      	mov	r1, r3
 8002494:	69f8      	ldr	r0, [r7, #28]
 8002496:	f7ff fe6f 	bl	8002178 <prvReloadTimer>
 800249a:	e008      	b.n	80024ae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	69f8      	ldr	r0, [r7, #28]
 80024b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80024b6:	e046      	b.n	8002546 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80024ca:	e03d      	b.n	8002548 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	617b      	str	r3, [r7, #20]
    }
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	18d1      	adds	r1, r2, r3
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	69f8      	ldr	r0, [r7, #28]
 8002512:	f7ff ff29 	bl	8002368 <prvInsertTimerInActiveList>
                        break;
 8002516:	e017      	b.n	8002548 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8002526:	69f8      	ldr	r0, [r7, #28]
 8002528:	f000 fb54 	bl	8002bd4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800252c:	e00c      	b.n	8002548 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002540:	e002      	b.n	8002548 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <prvProcessReceivedCommands+0x15c>
                        break;
 8002546:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <prvProcessReceivedCommands+0x180>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f107 0108 	add.w	r1, r7, #8
 8002550:	2200      	movs	r2, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f8d2 	bl	80006fc <xQueueReceive>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f af4a 	bne.w	80023f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001a8 	.word	0x200001a8

08002570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002576:	e009      	b.n	800258c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <prvSwitchTimerLists+0x44>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	6838      	ldr	r0, [r7, #0]
 8002588:	f7ff fe18 	bl	80021bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <prvSwitchTimerLists+0x44>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <prvSwitchTimerLists+0x44>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <prvSwitchTimerLists+0x48>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <prvSwitchTimerLists+0x44>)
 80025a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80025a4:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <prvSwitchTimerLists+0x48>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
    }
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200001a0 	.word	0x200001a0
 80025b8:	200001a4 	.word	0x200001a4

080025bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80025c0:	f000 f964 	bl	800288c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <prvCheckForValidListAndQueue+0x54>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d11d      	bne.n	8002608 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80025cc:	4811      	ldr	r0, [pc, #68]	@ (8002614 <prvCheckForValidListAndQueue+0x58>)
 80025ce:	f7fd fdff 	bl	80001d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80025d2:	4811      	ldr	r0, [pc, #68]	@ (8002618 <prvCheckForValidListAndQueue+0x5c>)
 80025d4:	f7fd fdfc 	bl	80001d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80025d8:	4b10      	ldr	r3, [pc, #64]	@ (800261c <prvCheckForValidListAndQueue+0x60>)
 80025da:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <prvCheckForValidListAndQueue+0x58>)
 80025dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <prvCheckForValidListAndQueue+0x64>)
 80025e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002618 <prvCheckForValidListAndQueue+0x5c>)
 80025e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80025e4:	2200      	movs	r2, #0
 80025e6:	210c      	movs	r1, #12
 80025e8:	200a      	movs	r0, #10
 80025ea:	f7fd ff13 	bl	8000414 <xQueueGenericCreate>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a07      	ldr	r2, [pc, #28]	@ (8002610 <prvCheckForValidListAndQueue+0x54>)
 80025f2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <prvCheckForValidListAndQueue+0x54>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <prvCheckForValidListAndQueue+0x54>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4908      	ldr	r1, [pc, #32]	@ (8002624 <prvCheckForValidListAndQueue+0x68>)
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fb84 	bl	8000d10 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002608:	f000 f972 	bl	80028f0 <vPortExitCritical>
    }
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200001a8 	.word	0x200001a8
 8002614:	20000178 	.word	0x20000178
 8002618:	2000018c 	.word	0x2000018c
 800261c:	200001a0 	.word	0x200001a0
 8002620:	200001a4 	.word	0x200001a4
 8002624:	08004044 	.word	0x08004044

08002628 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b04      	subs	r3, #4
 8002638:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002640:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b04      	subs	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b04      	subs	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002658:	4a0c      	ldr	r2, [pc, #48]	@ (800268c <pxPortInitialiseStack+0x64>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3b14      	subs	r3, #20
 8002662:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b04      	subs	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f06f 0202 	mvn.w	r2, #2
 8002676:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3b20      	subs	r3, #32
 800267c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	08002691 	.word	0x08002691

08002690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <prvTaskExitError+0x58>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d00b      	beq.n	80026bc <prvTaskExitError+0x2c>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	60fb      	str	r3, [r7, #12]
    }
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <prvTaskExitError+0x28>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	60bb      	str	r3, [r7, #8]
    }
 80026ce:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80026d0:	bf00      	nop
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0fc      	beq.n	80026d2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000004 	.word	0x20000004
 80026ec:	00000000 	.word	0x00000000

080026f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <pxCurrentTCBConst2>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	6808      	ldr	r0, [r1, #0]
 80026f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fa:	f380 8809 	msr	PSP, r0
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f380 8811 	msr	BASEPRI, r0
 800270a:	4770      	bx	lr
 800270c:	f3af 8000 	nop.w

08002710 <pxCurrentTCBConst2>:
 8002710:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop

08002718 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002718:	4808      	ldr	r0, [pc, #32]	@ (800273c <prvPortStartFirstTask+0x24>)
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	f380 8808 	msr	MSP, r0
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f380 8814 	msr	CONTROL, r0
 800272a:	b662      	cpsie	i
 800272c:	b661      	cpsie	f
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	df00      	svc	0
 8002738:	bf00      	nop
 800273a:	0000      	.short	0x0000
 800273c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop

08002744 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <xPortStartScheduler+0x124>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a47      	ldr	r2, [pc, #284]	@ (800286c <xPortStartScheduler+0x128>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d10b      	bne.n	800276c <xPortStartScheduler+0x28>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	613b      	str	r3, [r7, #16]
    }
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800276c:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <xPortStartScheduler+0x124>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3f      	ldr	r2, [pc, #252]	@ (8002870 <xPortStartScheduler+0x12c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10b      	bne.n	800278e <xPortStartScheduler+0x4a>
        __asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	60fb      	str	r3, [r7, #12]
    }
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800278e:	4b39      	ldr	r3, [pc, #228]	@ (8002874 <xPortStartScheduler+0x130>)
 8002790:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	22ff      	movs	r2, #255	@ 0xff
 800279e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <xPortStartScheduler+0x134>)
 80027b4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027b6:	4b31      	ldr	r3, [pc, #196]	@ (800287c <xPortStartScheduler+0x138>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027bc:	e009      	b.n	80027d2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <xPortStartScheduler+0x138>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	4a2d      	ldr	r2, [pc, #180]	@ (800287c <xPortStartScheduler+0x138>)
 80027c6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	d0ef      	beq.n	80027be <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027de:	4b27      	ldr	r3, [pc, #156]	@ (800287c <xPortStartScheduler+0x138>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00b      	beq.n	8002802 <xPortStartScheduler+0xbe>
        __asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	60bb      	str	r3, [r7, #8]
    }
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	e7fd      	b.n	80027fe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <xPortStartScheduler+0x138>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <xPortStartScheduler+0x138>)
 800280a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <xPortStartScheduler+0x138>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <xPortStartScheduler+0x138>)
 8002816:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002820:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <xPortStartScheduler+0x13c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <xPortStartScheduler+0x13c>)
 8002826:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <xPortStartScheduler+0x13c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <xPortStartScheduler+0x13c>)
 8002832:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002836:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002838:	f000 f8e0 	bl	80029fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <xPortStartScheduler+0x140>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002842:	f000 f8ff 	bl	8002a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <xPortStartScheduler+0x144>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <xPortStartScheduler+0x144>)
 800284c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002850:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002852:	f7ff ff61 	bl	8002718 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002856:	f7fe fecf 	bl	80015f8 <vTaskSwitchContext>
    prvTaskExitError();
 800285a:	f7ff ff19 	bl	8002690 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	410fc271 	.word	0x410fc271
 8002870:	410fc270 	.word	0x410fc270
 8002874:	e000e400 	.word	0xe000e400
 8002878:	200001b4 	.word	0x200001b4
 800287c:	200001b8 	.word	0x200001b8
 8002880:	e000ed20 	.word	0xe000ed20
 8002884:	20000004 	.word	0x20000004
 8002888:	e000ef34 	.word	0xe000ef34

0800288c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
        __asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	607b      	str	r3, [r7, #4]
    }
 80028a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <vPortEnterCritical+0x5c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a0e      	ldr	r2, [pc, #56]	@ (80028e8 <vPortEnterCritical+0x5c>)
 80028ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <vPortEnterCritical+0x5c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d110      	bne.n	80028da <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <vPortEnterCritical+0x60>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <vPortEnterCritical+0x4e>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	603b      	str	r3, [r7, #0]
    }
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	e7fd      	b.n	80028d6 <vPortEnterCritical+0x4a>
    }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000004 	.word	0x20000004
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <vPortExitCritical+0x50>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <vPortExitCritical+0x26>
        __asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	607b      	str	r3, [r7, #4]
    }
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <vPortExitCritical+0x50>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <vPortExitCritical+0x50>)
 800291e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002920:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <vPortExitCritical+0x50>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <vPortExitCritical+0x44>
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002932:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	20000004 	.word	0x20000004
	...

08002950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002950:	f3ef 8009 	mrs	r0, PSP
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <pxCurrentTCBConst>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f01e 0f10 	tst.w	lr, #16
 8002960:	bf08      	it	eq
 8002962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	6010      	str	r0, [r2, #0]
 800296c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002974:	f380 8811 	msr	BASEPRI, r0
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f7fe fe3a 	bl	80015f8 <vTaskSwitchContext>
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f380 8811 	msr	BASEPRI, r0
 800298c:	bc09      	pop	{r0, r3}
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002996:	f01e 0f10 	tst.w	lr, #16
 800299a:	bf08      	it	eq
 800299c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029a0:	f380 8809 	msr	PSP, r0
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst>:
 80029b0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
    }
 80029d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80029d2:	f7fe fcf9 	bl	80013c8 <xTaskIncrementTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <SysTick_Handler+0x40>)
 80029de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f383 8811 	msr	BASEPRI, r3
    }
 80029ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <vPortSetupTimerInterrupt+0x38>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <vPortSetupTimerInterrupt+0x3c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <vPortSetupTimerInterrupt+0x40>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <vPortSetupTimerInterrupt+0x44>)
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010
 8002a34:	e000e018 	.word	0xe000e018
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	10624dd3 	.word	0x10624dd3
 8002a40:	e000e014 	.word	0xe000e014

08002a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002a54 <vPortEnableVFP+0x10>
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002a4e:	6001      	str	r1, [r0, #0]
 8002a50:	4770      	bx	lr
 8002a52:	0000      	.short	0x0000
 8002a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop

08002a5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002a68:	f7fe fb94 	bl	8001194 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a6c:	4b54      	ldr	r3, [pc, #336]	@ (8002bc0 <pvPortMalloc+0x164>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002a74:	f000 f90c 	bl	8002c90 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002a7e:	2208      	movs	r2, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	3308      	adds	r3, #8
 8002a8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d804      	bhi.n	8002aa0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	e001      	b.n	8002aa4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db71      	blt.n	8002b8e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d06e      	beq.n	8002b8e <pvPortMalloc+0x132>
 8002ab0:	4b44      	ldr	r3, [pc, #272]	@ (8002bc4 <pvPortMalloc+0x168>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d869      	bhi.n	8002b8e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002aba:	4b43      	ldr	r3, [pc, #268]	@ (8002bc8 <pvPortMalloc+0x16c>)
 8002abc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002abe:	4b42      	ldr	r3, [pc, #264]	@ (8002bc8 <pvPortMalloc+0x16c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ac4:	e004      	b.n	8002ad0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d903      	bls.n	8002ae2 <pvPortMalloc+0x86>
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f1      	bne.n	8002ac6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ae2:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <pvPortMalloc+0x164>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d050      	beq.n	8002b8e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2208      	movs	r2, #8
 8002af2:	4413      	add	r3, r2
 8002af4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad2      	subs	r2, r2, r3
 8002b06:	2308      	movs	r3, #8
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d920      	bls.n	8002b50 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <pvPortMalloc+0xdc>
        __asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	613b      	str	r3, [r7, #16]
    }
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad2      	subs	r2, r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f000 f8fc 	bl	8002d48 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <pvPortMalloc+0x168>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <pvPortMalloc+0x168>)
 8002b5c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b5e:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <pvPortMalloc+0x168>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <pvPortMalloc+0x170>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d203      	bcs.n	8002b72 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <pvPortMalloc+0x168>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	@ (8002bcc <pvPortMalloc+0x170>)
 8002b70:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <pvPortMalloc+0x174>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <pvPortMalloc+0x174>)
 8002b8c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002b8e:	f7fe fb0f 	bl	80011b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <pvPortMalloc+0x158>
        __asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	60fb      	str	r3, [r7, #12]
    }
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <pvPortMalloc+0x154>
    return pvReturn;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20012dc4 	.word	0x20012dc4
 8002bc4:	20012dc8 	.word	0x20012dc8
 8002bc8:	20012dbc 	.word	0x20012dbc
 8002bcc:	20012dcc 	.word	0x20012dcc
 8002bd0:	20012dd0 	.word	0x20012dd0

08002bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04b      	beq.n	8002c7e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002be6:	2308      	movs	r3, #8
 8002be8:	425b      	negs	r3, r3
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0b      	blt.n	8002c14 <vPortFree+0x40>
        __asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	60fb      	str	r3, [r7, #12]
    }
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <vPortFree+0x60>
        __asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	60bb      	str	r3, [r7, #8]
    }
 8002c2e:	bf00      	nop
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0fdb      	lsrs	r3, r3, #31
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01c      	beq.n	8002c7e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d118      	bne.n	8002c7e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002c58:	f7fe fa9c 	bl	8001194 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <vPortFree+0xb4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <vPortFree+0xb4>)
 8002c68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c6a:	6938      	ldr	r0, [r7, #16]
 8002c6c:	f000 f86c 	bl	8002d48 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <vPortFree+0xb8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	4a05      	ldr	r2, [pc, #20]	@ (8002c8c <vPortFree+0xb8>)
 8002c78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002c7a:	f7fe fa99 	bl	80011b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20012dc8 	.word	0x20012dc8
 8002c8c:	20012dd4 	.word	0x20012dd4

08002c90 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c96:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <prvHeapInit+0xa4>)
 8002c9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3307      	adds	r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002d34 <prvHeapInit+0xa4>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <prvHeapInit+0xa8>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <prvHeapInit+0xa8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002cdc:	2208      	movs	r2, #8
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0307 	bic.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <prvHeapInit+0xac>)
 8002cf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <prvHeapInit+0xac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <prvHeapInit+0xac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <prvHeapInit+0xac>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <prvHeapInit+0xb0>)
 8002d1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <prvHeapInit+0xb4>)
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	200001bc 	.word	0x200001bc
 8002d38:	20012dbc 	.word	0x20012dbc
 8002d3c:	20012dc4 	.word	0x20012dc4
 8002d40:	20012dcc 	.word	0x20012dcc
 8002d44:	20012dc8 	.word	0x20012dc8

08002d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <prvInsertBlockIntoFreeList+0xac>)
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e002      	b.n	8002d5c <prvInsertBlockIntoFreeList+0x14>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d8f7      	bhi.n	8002d56 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d108      	bne.n	8002d8a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	441a      	add	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	441a      	add	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d118      	bne.n	8002dd0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <prvInsertBlockIntoFreeList+0xb0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d00d      	beq.n	8002dc6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e008      	b.n	8002dd8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <prvInsertBlockIntoFreeList+0xb0>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e003      	b.n	8002dd8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d002      	beq.n	8002de6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20012dbc 	.word	0x20012dbc
 8002df8:	20012dc4 	.word	0x20012dc4

08002dfc <dma_clear_interrupt_flags>:
dma_if_offset
*/

void dma_clear_interrupt_flags(uint32_t dma, uint8_t stream,
			       uint32_t interrupts)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	460b      	mov	r3, r1
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	72fb      	strb	r3, [r7, #11]
	/* Get offset to interrupt flag location in stream field */
	uint32_t flags = (interrupts << DMA_ISR_OFFSET(stream));
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0201 	and.w	r2, r3, #1
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	461a      	mov	r2, r3
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	105b      	asrs	r3, r3, #1
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
	/* First four streams are in low register. Flag clear must be set then
	 * reset.
	 */
	if (stream < 4) {
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d805      	bhi.n	8002e40 <dma_clear_interrupt_flags+0x44>
		DMA_LIFCR(dma) = flags;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	461a      	mov	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	6013      	str	r3, [r2, #0]
	} else {
		DMA_HIFCR(dma) = flags;
	}
}
 8002e3e:	e004      	b.n	8002e4a <dma_clear_interrupt_flags+0x4e>
		DMA_HIFCR(dma) = flags;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	330c      	adds	r3, #12
 8002e44:	461a      	mov	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <dma_get_interrupt_flag>:
@param[in] interrupt unsigned int32. Interrupt number: @ref dma_if_offset
@returns bool interrupt flag is set.
*/

bool dma_get_interrupt_flag(uint32_t dma, uint8_t stream, uint32_t interrupt)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	72fb      	strb	r3, [r7, #11]
	/* get offset to interrupt flag location in stream field. Assumes
	 * stream and interrupt parameters are integers.
	 */
	uint32_t flag = (interrupt << DMA_ISR_OFFSET(stream));
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	461a      	mov	r2, r3
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	105b      	asrs	r3, r3, #1
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	4413      	add	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
	/* First four streams are in low register */
	if (stream < 4) {
 8002e88:	7afb      	ldrb	r3, [r7, #11]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d809      	bhi.n	8002ea2 <dma_get_interrupt_flag+0x4c>
		return ((DMA_LISR(dma) & flag) > 0);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e009      	b.n	8002eb6 <dma_get_interrupt_flag+0x60>
	} else {
		return ((DMA_HISR(dma) & flag) > 0);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
	}
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <flash_set_ws>:
{
	FLASH_ACR &= ~FLASH_ACR_PRFTEN;
}

void flash_set_ws(uint32_t ws)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <flash_set_ws+0x30>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	60fb      	str	r3, [r7, #12]
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
	FLASH_ACR = reg32;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <flash_set_ws+0x30>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <flash_dcache_enable>:
	flash_wait_for_last_operation();
}
/**@}*/

void flash_dcache_enable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	FLASH_ACR |= FLASH_ACR_DCEN;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <flash_dcache_enable+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	@ (8002f14 <flash_dcache_enable+0x1c>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <flash_dcache_disable>:

void flash_dcache_disable(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	FLASH_ACR &= ~FLASH_ACR_DCEN;
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <flash_dcache_disable+0x1c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <flash_dcache_disable+0x1c>)
 8002f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <flash_icache_enable>:

void flash_icache_enable(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
	FLASH_ACR |= FLASH_ACR_ICEN;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <flash_icache_enable+0x1c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <flash_icache_enable+0x1c>)
 8002f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <flash_icache_disable>:

void flash_icache_disable(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	FLASH_ACR &= ~FLASH_ACR_ICEN;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <flash_icache_disable+0x1c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a04      	ldr	r2, [pc, #16]	@ (8002f74 <flash_icache_disable+0x1c>)
 8002f62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <DMA1_Stream5_IRQHandler>:
}

/**
 * @brief DMA1 Stream 5 interrupt handler
 */
void DMA1_Stream5_IRQHandler(void) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
    // Check and handle half-transfer interrupt
    if (dma_get_interrupt_flag(DMA1, DMA1_STREAM, DMA_HTIF)) {
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	2105      	movs	r1, #5
 8002f80:	4814      	ldr	r0, [pc, #80]	@ (8002fd4 <DMA1_Stream5_IRQHandler+0x5c>)
 8002f82:	f7ff ff68 	bl	8002e56 <dma_get_interrupt_flag>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <DMA1_Stream5_IRQHandler+0x2e>
        dma_clear_interrupt_flags(DMA1, DMA1_STREAM, DMA_HTIF);
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	2105      	movs	r1, #5
 8002f90:	4810      	ldr	r0, [pc, #64]	@ (8002fd4 <DMA1_Stream5_IRQHandler+0x5c>)
 8002f92:	f7ff ff33 	bl	8002dfc <dma_clear_interrupt_flags>
        dma_buffer.half_transfer = true;
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <DMA1_Stream5_IRQHandler+0x60>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
        dma_buffer.head = DMA_BUFFER_SIZE / 2; // Update head for half buffer
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <DMA1_Stream5_IRQHandler+0x60>)
 8002fa0:	2280      	movs	r2, #128	@ 0x80
 8002fa2:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    }

    // Check and handle transfer-complete interrupt
    if (dma_get_interrupt_flag(DMA1, DMA1_STREAM, DMA_TCIF)) {
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	2105      	movs	r1, #5
 8002faa:	480a      	ldr	r0, [pc, #40]	@ (8002fd4 <DMA1_Stream5_IRQHandler+0x5c>)
 8002fac:	f7ff ff53 	bl	8002e56 <dma_get_interrupt_flag>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <DMA1_Stream5_IRQHandler+0x58>
        dma_clear_interrupt_flags(DMA1, DMA1_STREAM, DMA_TCIF);
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	2105      	movs	r1, #5
 8002fba:	4806      	ldr	r0, [pc, #24]	@ (8002fd4 <DMA1_Stream5_IRQHandler+0x5c>)
 8002fbc:	f7ff ff1e 	bl	8002dfc <dma_clear_interrupt_flags>
        dma_buffer.full_transfer = true;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <DMA1_Stream5_IRQHandler+0x60>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
        dma_buffer.head = 0; // Reset head for full buffer
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <DMA1_Stream5_IRQHandler+0x60>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    }

    // User code can check dma_buffer.half_transfer or dma_buffer.full_transfer
    // to process data from dma_buffer.data[0:DMA_BUFFER_SIZE/2] or [DMA_BUFFER_SIZE/2:DMA_BUFFER_SIZE]
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40026000 	.word	0x40026000
 8002fd8:	20012dd8 	.word	0x20012dd8

08002fdc <timer_init>:
/**
 * @brief Initializes TIM2 as a 32-bit upcounting timer with DMA update event
 * @param timer_peripheral TIM2 peripheral base address
 * @return bool True if initialization successful, false otherwise
 */
bool timer_init(uint32_t timer_peripheral) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    // Validate input parameters
    if (timer_peripheral == 0) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <timer_init+0x12>
        return false;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e02c      	b.n	8003048 <timer_init+0x6c>
    }

    // Disable timer before configuration
    timer_disable_counter(timer_peripheral);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fde8 	bl	8003bc4 <timer_disable_counter>

    // Configure timer mode: upcounting, edge-aligned
    timer_set_mode(timer_peripheral, TIM_CLOCK_DIVISION, TIM_ALIGNMENT_EDGE, TIM_DIRECTION_UP);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd83 	bl	8003b06 <timer_set_mode>
    timer_continuous_mode(timer_peripheral); // Ensure repetitive operation
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fdaf 	bl	8003b64 <timer_continuous_mode>
    timer_update_on_overflow(timer_peripheral); // Update event on overflow
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fdbc 	bl	8003b84 <timer_update_on_overflow>

    // Set prescaler and period for 1 kHz update rate
    timer_set_prescaler(timer_peripheral, TIM_PRESCALER - 1); // Prescaler is 0-based
 800300c:	2153      	movs	r1, #83	@ 0x53
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fdfa 	bl	8003c08 <timer_set_prescaler>
    timer_set_period(timer_peripheral, TIM_PERIOD - 1); // Period is 0-based
 8003014:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fe05 	bl	8003c28 <timer_set_period>

    // Enable preload for stable updates
    timer_enable_preload(timer_peripheral);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd90 	bl	8003b44 <timer_enable_preload>

    // Configure DMA on update event
    timer_set_dma_on_update_event(timer_peripheral);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fddd 	bl	8003be4 <timer_set_dma_on_update_event>

    // Start the timer
    timer_enable_counter(timer_peripheral);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fdba 	bl	8003ba4 <timer_enable_counter>

    // Verify timer is running (basic check)
    if (timer_get_counter(timer_peripheral) == 0) {
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fe09 	bl	8003c48 <timer_get_counter>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <timer_init+0x6a>
        timer_disable_counter(timer_peripheral);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fdc1 	bl	8003bc4 <timer_disable_counter>
        return false;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <timer_init+0x6c>
    }

    return true;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <clock_setup>:
#define USART1_IRQN 37
#define UART_INTERRUPT_PRIORITY 5 // Priority level (0-15, lower is higher priority)



void clock_setup(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
    // Enable HSE and wait for it to be ready
    rcc_osc_on(RCC_HSE);
 8003054:	2003      	movs	r0, #3
 8003056:	f000 faf9 	bl	800364c <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSE);
 800305a:	2003      	movs	r0, #3
 800305c:	f000 faac 	bl	80035b8 <rcc_wait_for_osc_ready>

    // Apply the predefined 84 MHz configuration (includes flash settings)
    rcc_clock_setup_pll(&rcc_hse_8mhz_3v3[RCC_CLOCK_3V3_84MHZ]);
 8003060:	480a      	ldr	r0, [pc, #40]	@ (800308c <clock_setup+0x3c>)
 8003062:	f000 fc6b 	bl	800393c <rcc_clock_setup_pll>

    // Enable peripheral clocks (example: GPIOA and USART1)
    rcc_periph_clock_enable(RCC_GPIOA);
 8003066:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800306a:	f000 fd27 	bl	8003abc <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USART1);
 800306e:	f640 0084 	movw	r0, #2180	@ 0x884
 8003072:	f000 fd23 	bl	8003abc <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_TIM2);
 8003076:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800307a:	f000 fd1f 	bl	8003abc <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_DMA1);
 800307e:	f240 6015 	movw	r0, #1557	@ 0x615
 8003082:	f000 fd1b 	bl	8003abc <rcc_periph_clock_enable>

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	0800406c 	.word	0x0800406c

08003090 <usart_setup>:


     gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO5);
}

bool usart_setup(void) {
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
    // Set baud rate to 115200
    usart_set_baudrate(USART1, UART_BAUDRATE);
 8003094:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003098:	4829      	ldr	r0, [pc, #164]	@ (8003140 <usart_setup+0xb0>)
 800309a:	f000 fde2 	bl	8003c62 <usart_set_baudrate>

    // Set 8 data bits
    usart_set_databits(USART1, UART_DATABITS);
 800309e:	2108      	movs	r1, #8
 80030a0:	4827      	ldr	r0, [pc, #156]	@ (8003140 <usart_setup+0xb0>)
 80030a2:	f000 fdf6 	bl	8003c92 <usart_set_databits>

    // Set 1 stop bit
    usart_set_stopbits(USART1, USART_STOPBITS_1);
 80030a6:	2100      	movs	r1, #0
 80030a8:	4825      	ldr	r0, [pc, #148]	@ (8003140 <usart_setup+0xb0>)
 80030aa:	f000 fe27 	bl	8003cfc <usart_set_stopbits>

    // Set no parity
    usart_set_parity(USART1, USART_PARITY_NONE);
 80030ae:	2100      	movs	r1, #0
 80030b0:	4823      	ldr	r0, [pc, #140]	@ (8003140 <usart_setup+0xb0>)
 80030b2:	f000 fe4e 	bl	8003d52 <usart_set_parity>

    // Set TX/RX mode
    usart_set_mode(USART1, USART_MODE_TX_RX);
 80030b6:	210c      	movs	r1, #12
 80030b8:	4821      	ldr	r0, [pc, #132]	@ (8003140 <usart_setup+0xb0>)
 80030ba:	f000 fe75 	bl	8003da8 <usart_set_mode>

    // Set no hardware flow control
    usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 80030be:	2100      	movs	r1, #0
 80030c0:	481f      	ldr	r0, [pc, #124]	@ (8003140 <usart_setup+0xb0>)
 80030c2:	f000 fe8b 	bl	8003ddc <usart_set_flow_control>

    // Enable receive interrupt
        usart_enable_rx_interrupt(USART1);
 80030c6:	481e      	ldr	r0, [pc, #120]	@ (8003140 <usart_setup+0xb0>)
 80030c8:	f000 feea 	bl	8003ea0 <usart_enable_rx_interrupt>

        // Disable other interrupts to prevent unwanted triggers
        usart_disable_tx_interrupt(USART1);
 80030cc:	481c      	ldr	r0, [pc, #112]	@ (8003140 <usart_setup+0xb0>)
 80030ce:	f000 fef9 	bl	8003ec4 <usart_disable_tx_interrupt>
        usart_disable_tx_complete_interrupt(USART1);
 80030d2:	481b      	ldr	r0, [pc, #108]	@ (8003140 <usart_setup+0xb0>)
 80030d4:	f000 ff08 	bl	8003ee8 <usart_disable_tx_complete_interrupt>
        usart_disable_idle_interrupt(USART1);
 80030d8:	4819      	ldr	r0, [pc, #100]	@ (8003140 <usart_setup+0xb0>)
 80030da:	f000 ff17 	bl	8003f0c <usart_disable_idle_interrupt>
        usart_disable_error_interrupt(USART1);
 80030de:	4818      	ldr	r0, [pc, #96]	@ (8003140 <usart_setup+0xb0>)
 80030e0:	f000 ff26 	bl	8003f30 <usart_disable_error_interrupt>

        // Disable DMA to ensure standard operation
        usart_disable_rx_dma(USART1);
 80030e4:	4816      	ldr	r0, [pc, #88]	@ (8003140 <usart_setup+0xb0>)
 80030e6:	f000 feb7 	bl	8003e58 <usart_disable_rx_dma>
        usart_disable_tx_dma(USART1);
 80030ea:	4815      	ldr	r0, [pc, #84]	@ (8003140 <usart_setup+0xb0>)
 80030ec:	f000 fec6 	bl	8003e7c <usart_disable_tx_dma>

        // Configure NVIC for USART2 interrupt
          nvic_set_priority(USART1_IRQN, UART_INTERRUPT_PRIORITY);
 80030f0:	2105      	movs	r1, #5
 80030f2:	2025      	movs	r0, #37	@ 0x25
 80030f4:	f000 f9aa 	bl	800344c <nvic_set_priority>
          nvic_clear_pending_irq(USART1_IRQN); // Clear any pending interrupts
 80030f8:	2025      	movs	r0, #37	@ 0x25
 80030fa:	f000 f98d 	bl	8003418 <nvic_clear_pending_irq>
          nvic_enable_irq(USART1_IRQN);        // Enable interrupt in NVIC
 80030fe:	2025      	movs	r0, #37	@ 0x25
 8003100:	f000 f970 	bl	80033e4 <nvic_enable_irq>

        // Enable UART
        usart_enable(USART1);
 8003104:	480e      	ldr	r0, [pc, #56]	@ (8003140 <usart_setup+0xb0>)
 8003106:	f000 fe83 	bl	8003e10 <usart_enable>
        // Verify configuration
            if (usart_get_databits(USART1) != UART_DATABITS ||
 800310a:	480d      	ldr	r0, [pc, #52]	@ (8003140 <usart_setup+0xb0>)
 800310c:	f000 fde0 	bl	8003cd0 <usart_get_databits>
 8003110:	4603      	mov	r3, r0
 8003112:	2b08      	cmp	r3, #8
 8003114:	d10b      	bne.n	800312e <usart_setup+0x9e>
                usart_get_stopbits(USART1) != UART_STOPBITS ||
 8003116:	480a      	ldr	r0, [pc, #40]	@ (8003140 <usart_setup+0xb0>)
 8003118:	f000 fe0a 	bl	8003d30 <usart_get_stopbits>
 800311c:	4603      	mov	r3, r0
            if (usart_get_databits(USART1) != UART_DATABITS ||
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <usart_setup+0x9e>
                usart_get_parity(USART1) != USART_PARITY_NONE) {
 8003122:	4807      	ldr	r0, [pc, #28]	@ (8003140 <usart_setup+0xb0>)
 8003124:	f000 fe2f 	bl	8003d86 <usart_get_parity>
 8003128:	4603      	mov	r3, r0
                usart_get_stopbits(USART1) != UART_STOPBITS ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <usart_setup+0xa8>
                usart_disable(USART1);
 800312e:	4804      	ldr	r0, [pc, #16]	@ (8003140 <usart_setup+0xb0>)
 8003130:	f000 fe80 	bl	8003e34 <usart_disable>
                return false;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <usart_setup+0xaa>
            }

            return true;
 8003138:	2301      	movs	r3, #1

    // Enable USART1
    usart_enable(USART1);
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40011000 	.word	0x40011000

08003144 <AcquisitionTask>:
 void AcquisitionTask(void *pvParameters);
 void ProcessingTask(void *pvParameters);
 void CommunicationTask(void *pvParameters);

void AcquisitionTask(void *pvParameters)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	for (;;)
	    {
	        // Wait for DMA signal (from ISR)
	        if (xSemaphoreTake(dmaSemaphore, portMAX_DELAY) == pdTRUE)
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <AcquisitionTask+0x7c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fbb3 	bl	80008c0 <xQueueSemaphoreTake>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d1f5      	bne.n	800314c <AcquisitionTask+0x8>
	        {
	            // DMA has filled the buffer, process it
	           // process_buffer_data();

	        	for(i=dma_buffer.head;i<=128;i++){
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <AcquisitionTask+0x80>)
 8003162:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8003166:	81fb      	strh	r3, [r7, #14]
 8003168:	e025      	b.n	80031b6 <AcquisitionTask+0x72>

	        		for (uint8_t j = 0; j < 16; j++) {
 800316a:	2300      	movs	r3, #0
 800316c:	737b      	strb	r3, [r7, #13]
 800316e:	e01c      	b.n	80031aa <AcquisitionTask+0x66>

	        			B.port_state = (dma_buffer.data[i] >> j) & 0x01; // Extract bit i
 8003170:	89fb      	ldrh	r3, [r7, #14]
 8003172:	4a14      	ldr	r2, [pc, #80]	@ (80031c4 <AcquisitionTask+0x80>)
 8003174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003178:	461a      	mov	r2, r3
 800317a:	7b7b      	ldrb	r3, [r7, #13]
 800317c:	fa42 f303 	asr.w	r3, r2, r3
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <AcquisitionTask+0x84>)
 8003190:	701a      	strb	r2, [r3, #0]
	        			xQueueSend(dmaQueue[j], &B, 0);
 8003192:	7b7b      	ldrb	r3, [r7, #13]
 8003194:	4a0d      	ldr	r2, [pc, #52]	@ (80031cc <AcquisitionTask+0x88>)
 8003196:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800319a:	2300      	movs	r3, #0
 800319c:	2200      	movs	r2, #0
 800319e:	490a      	ldr	r1, [pc, #40]	@ (80031c8 <AcquisitionTask+0x84>)
 80031a0:	f7fd f9aa 	bl	80004f8 <xQueueGenericSend>
	        		for (uint8_t j = 0; j < 16; j++) {
 80031a4:	7b7b      	ldrb	r3, [r7, #13]
 80031a6:	3301      	adds	r3, #1
 80031a8:	737b      	strb	r3, [r7, #13]
 80031aa:	7b7b      	ldrb	r3, [r7, #13]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d9df      	bls.n	8003170 <AcquisitionTask+0x2c>
	        	for(i=dma_buffer.head;i<=128;i++){
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	3301      	adds	r3, #1
 80031b4:	81fb      	strh	r3, [r7, #14]
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	2b80      	cmp	r3, #128	@ 0x80
 80031ba:	d9d6      	bls.n	800316a <AcquisitionTask+0x26>
	        if (xSemaphoreTake(dmaSemaphore, portMAX_DELAY) == pdTRUE)
 80031bc:	e7c6      	b.n	800314c <AcquisitionTask+0x8>
 80031be:	bf00      	nop
 80031c0:	20012fe8 	.word	0x20012fe8
 80031c4:	20012dd8 	.word	0x20012dd8
 80031c8:	20012fec 	.word	0x20012fec
 80031cc:	20012ff0 	.word	0x20012ff0

080031d0 <ProcessingTask>:




void ProcessingTask(void *pvParameters)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	if (xQueueReceive(dmaQueue, &B, portMAX_DELAY) == pdTRUE)
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	4903      	ldr	r1, [pc, #12]	@ (80031ec <ProcessingTask+0x1c>)
 80031de:	4804      	ldr	r0, [pc, #16]	@ (80031f0 <ProcessingTask+0x20>)
 80031e0:	f7fd fa8c 	bl	80006fc <xQueueReceive>
//		for (uint8_t i = 0; i < 16; i++) {
//		    B[i].port_state = (dmadata.data >> i) & 0x01; // Extract bit i
//		    B[i].timestamp = dmadata.timestamp;
		}

	}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20012fec 	.word	0x20012fec
 80031f0:	20012ff0 	.word	0x20012ff0

080031f4 <CommunicationTask>:


 void CommunicationTask(void *pvParameters)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <main>:

 uint32_t SystemCoreClock=8400000;


int main(void)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08d      	sub	sp, #52	@ 0x34
 800320c:	af02      	add	r7, sp, #8

	clock_setup();
 800320e:	f7ff ff1f 	bl	8003050 <clock_setup>

	BaseType_t status;


	status =usart_setup();
 8003212:	f7ff ff3d 	bl	8003090 <usart_setup>
 8003216:	4603      	mov	r3, r0
 8003218:	623b      	str	r3, [r7, #32]
	configASSERT(status == pdPASS);  // Ensure creation succeeded
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d00b      	beq.n	8003238 <main+0x30>
        __asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	61fb      	str	r3, [r7, #28]
    }
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <main+0x2c>

	status =timer_init(TIM2);
 8003238:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800323c:	f7ff fece 	bl	8002fdc <timer_init>
 8003240:	4603      	mov	r3, r0
 8003242:	623b      	str	r3, [r7, #32]
		configASSERT(status == pdPASS);  // Ensure creation succeeded
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d00b      	beq.n	8003262 <main+0x5a>
        __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61bb      	str	r3, [r7, #24]
    }
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <main+0x56>


	    // Create Acquisition Task
	    status = xTaskCreate(
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <main+0x1ac>)
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	2304      	movs	r3, #4
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	2280      	movs	r2, #128	@ 0x80
 800326e:	4952      	ldr	r1, [pc, #328]	@ (80033b8 <main+0x1b0>)
 8003270:	4852      	ldr	r0, [pc, #328]	@ (80033bc <main+0x1b4>)
 8003272:	f7fd fdd1 	bl	8000e18 <xTaskCreate>
 8003276:	6238      	str	r0, [r7, #32]
	        ACQUISITION_TASK_STACK_SIZE,
	        NULL,
	        ACQUISITION_TASK_PRIORITY,
	        &acquisitionTaskHandle
	    );
	    configASSERT(status == pdPASS);  // Ensure creation succeeded
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d00b      	beq.n	8003296 <main+0x8e>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	617b      	str	r3, [r7, #20]
    }
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <main+0x8a>

	    // Create Processing Task
	    status = xTaskCreate(
 8003296:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <main+0x1b8>)
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2303      	movs	r3, #3
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032a4:	4947      	ldr	r1, [pc, #284]	@ (80033c4 <main+0x1bc>)
 80032a6:	4848      	ldr	r0, [pc, #288]	@ (80033c8 <main+0x1c0>)
 80032a8:	f7fd fdb6 	bl	8000e18 <xTaskCreate>
 80032ac:	6238      	str	r0, [r7, #32]
	        PROCESSING_TASK_STACK_SIZE,
	        NULL,
	        PROCESSING_TASK_PRIORITY,
	        &processingTaskHandle
	    );
	    configASSERT(status == pdPASS);
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d00b      	beq.n	80032cc <main+0xc4>
        __asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	613b      	str	r3, [r7, #16]
    }
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <main+0xc0>

	    // Create Communication Task
	    status = xTaskCreate(
 80032cc:	4b3f      	ldr	r3, [pc, #252]	@ (80033cc <main+0x1c4>)
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	2302      	movs	r3, #2
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	493d      	ldr	r1, [pc, #244]	@ (80033d0 <main+0x1c8>)
 80032da:	483e      	ldr	r0, [pc, #248]	@ (80033d4 <main+0x1cc>)
 80032dc:	f7fd fd9c 	bl	8000e18 <xTaskCreate>
 80032e0:	6238      	str	r0, [r7, #32]
	        COMM_TASK_STACK_SIZE,
	        NULL,
	        COMM_TASK_PRIORITY,
	        &commTaskHandle
	    );
	    configASSERT(status == pdPASS);
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d00b      	beq.n	8003300 <main+0xf8>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
    }
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <main+0xf4>

	    dmaSemaphore = xSemaphoreCreateBinary();
 8003300:	2203      	movs	r2, #3
 8003302:	2100      	movs	r1, #0
 8003304:	2001      	movs	r0, #1
 8003306:	f7fd f885 	bl	8000414 <xQueueGenericCreate>
 800330a:	4603      	mov	r3, r0
 800330c:	4a32      	ldr	r2, [pc, #200]	@ (80033d8 <main+0x1d0>)
 800330e:	6013      	str	r3, [r2, #0]
	    configASSERT(dmaSemaphore != NULL);  // Always check
 8003310:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <main+0x1d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <main+0x128>
        __asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60bb      	str	r3, [r7, #8]
    }
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <main+0x124>


	        for (uint8_t i = 0; i < 16; i++) {
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003336:	e029      	b.n	800338c <main+0x184>
	        	dmaQueue[i] = xQueueCreate(10, ITEM_SIZE); // Stores just port_state
 8003338:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800333c:	2200      	movs	r2, #0
 800333e:	2104      	movs	r1, #4
 8003340:	200a      	movs	r0, #10
 8003342:	f7fd f867 	bl	8000414 <xQueueGenericCreate>
 8003346:	4603      	mov	r3, r0
 8003348:	4a24      	ldr	r2, [pc, #144]	@ (80033dc <main+0x1d4>)
 800334a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	            if (dmaQueue[i] == NULL) {
 800334e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003352:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <main+0x1d4>)
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d112      	bne.n	8003382 <main+0x17a>
	            	 configASSERT(dmaQueue[i] != NULL);
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003360:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <main+0x1d4>)
 8003362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <main+0x17a>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	607b      	str	r3, [r7, #4]
    }
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <main+0x176>
	        for (uint8_t i = 0; i < 16; i++) {
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003386:	3301      	adds	r3, #1
 8003388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800338c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d9d1      	bls.n	8003338 <main+0x130>


//	    dmaQueue = xQueueCreate(QUEUE_LENGTH, ITEM_SIZE);
//	    configASSERT(dmaQueue != NULL);

	    uartQueue = xQueueCreate(PROTOCAL_STRUCT_SIZE, ITEM_SIZE);
 8003394:	2200      	movs	r2, #0
 8003396:	2104      	movs	r1, #4
 8003398:	200e      	movs	r0, #14
 800339a:	f7fd f83b 	bl	8000414 <xQueueGenericCreate>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <main+0x1d8>)
 80033a2:	6013      	str	r3, [r2, #0]
	    	    configASSERT(dmaQueue != NULL);


	    // Start scheduler
	    vTaskStartScheduler();
 80033a4:	f7fd fea4 	bl	80010f0 <vTaskStartScheduler>
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	372c      	adds	r7, #44	@ 0x2c
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd90      	pop	{r4, r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20012fdc 	.word	0x20012fdc
 80033b8:	0800404c 	.word	0x0800404c
 80033bc:	08003145 	.word	0x08003145
 80033c0:	20012fe0 	.word	0x20012fe0
 80033c4:	08004058 	.word	0x08004058
 80033c8:	080031d1 	.word	0x080031d1
 80033cc:	20012fe4 	.word	0x20012fe4
 80033d0:	08004064 	.word	0x08004064
 80033d4:	080031f5 	.word	0x080031f5
 80033d8:	20012fe8 	.word	0x20012fe8
 80033dc:	20012ff0 	.word	0x20012ff0
 80033e0:	20013030 	.word	0x20013030

080033e4 <nvic_enable_irq>:
 *
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8003404:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <nvic_clear_pending_irq>:
 *
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_clear_pending_irq(uint8_t irqn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
	NVIC_ICPR(irqn / 32) = (1 << (irqn % 32));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	b2db      	uxtb	r3, r3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4619      	mov	r1, r3
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <nvic_clear_pending_irq+0x30>)
 8003438:	440b      	add	r3, r1
 800343a:	601a      	str	r2, [r3, #0]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e280 	.word	0xe000e280

0800344c <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */

void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	71bb      	strb	r3, [r7, #6]
    if (irqn >= NVIC_IRQ_COUNT) {
        /* Cortex-M system interrupts */
        SCB_SHPR((irqn & 0xF) - 4) = priority;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <nvic_set_priority+0x2c>)
 8003464:	4413      	add	r3, r2
 8003466:	461a      	mov	r2, r3
 8003468:	79bb      	ldrb	r3, [r7, #6]
 800346a:	7013      	strb	r3, [r2, #0]
    } else {
        /* Device-specific interrupts */
        NVIC_IPR(irqn) = priority;
    }
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed14 	.word	0xe000ed14

0800347c <pwr_set_vos_scale>:
}
/**@}*/


void pwr_set_vos_scale(enum pwr_vos_scale scale)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
	/* You are not allowed to write zeros here, don't try and optimize! */
	uint32_t reg = PWR_CR;
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <pwr_set_vos_scale+0x5c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
	reg &= ~(PWR_CR_VOS_MASK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8003492:	60fb      	str	r3, [r7, #12]
	switch (scale) {
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d010      	beq.n	80034bc <pwr_set_vos_scale+0x40>
 800349a:	2b02      	cmp	r3, #2
 800349c:	dc13      	bgt.n	80034c6 <pwr_set_vos_scale+0x4a>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <pwr_set_vos_scale+0x2c>
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <pwr_set_vos_scale+0x36>
 80034a6:	e00e      	b.n	80034c6 <pwr_set_vos_scale+0x4a>
	case PWR_SCALE1:
		reg |= PWR_CR_VOS_RANGE1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034ae:	60fb      	str	r3, [r7, #12]
		break;
 80034b0:	e009      	b.n	80034c6 <pwr_set_vos_scale+0x4a>
	case PWR_SCALE2:
		reg |= PWR_CR_VOS_RANGE2;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034b8:	60fb      	str	r3, [r7, #12]
		break;
 80034ba:	e004      	b.n	80034c6 <pwr_set_vos_scale+0x4a>
	case PWR_SCALE3:
		reg |= PWR_CR_VOS_RANGE3;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 80034c2:	60fb      	str	r3, [r7, #12]
		break;
 80034c4:	bf00      	nop
	}
	PWR_CR = reg;
 80034c6:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <pwr_set_vos_scale+0x5c>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40007000 	.word	0x40007000

080034dc <rcc_is_osc_ready>:
{
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
	switch (osc) {
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d857      	bhi.n	800359c <rcc_is_osc_ready+0xc0>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <rcc_is_osc_ready+0x18>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003511 	.word	0x08003511
 80034f8:	08003575 	.word	0x08003575
 80034fc:	08003589 	.word	0x08003589
 8003500:	08003525 	.word	0x08003525
 8003504:	08003539 	.word	0x08003539
 8003508:	0800354d 	.word	0x0800354d
 800350c:	08003561 	.word	0x08003561
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8003510:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <rcc_is_osc_ready+0xd0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e03c      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <rcc_is_osc_ready+0xd0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e032      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8003538:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <rcc_is_osc_ready+0xd0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e028      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_LSE:
		return RCC_BDCR & RCC_BDCR_LSERDY;
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <rcc_is_osc_ready+0xd4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e01e      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <rcc_is_osc_ready+0xd8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e014      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_PLLSAI:
		return RCC_CR & RCC_CR_PLLSAIRDY;
 8003574:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <rcc_is_osc_ready+0xd0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e00a      	b.n	800359e <rcc_is_osc_ready+0xc2>
	case RCC_PLLI2S:
		return RCC_CR & RCC_CR_PLLI2SRDY;
 8003588:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <rcc_is_osc_ready+0xd0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e000      	b.n	800359e <rcc_is_osc_ready+0xc2>
	}
	return false;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40023870 	.word	0x40023870
 80035b4:	40023874 	.word	0x40023874

080035b8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
	while (!rcc_is_osc_ready(osc));
 80035c2:	bf00      	nop
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff88 	bl	80034dc <rcc_is_osc_ready>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f083 0301 	eor.w	r3, r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f5      	bne.n	80035c4 <rcc_wait_for_osc_ready+0xc>
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <rcc_wait_for_sysclk_status>:

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
	switch (osc) {
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d018      	beq.n	8003626 <rcc_wait_for_sysclk_status+0x42>
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	dc1f      	bgt.n	8003638 <rcc_wait_for_sysclk_status+0x54>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <rcc_wait_for_sysclk_status+0x1e>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d009      	beq.n	8003614 <rcc_wait_for_sysclk_status+0x30>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
			RCC_CFGR_SWS_HSI);
		break;
	default:
		/* Shouldn't be reached. */
		break;
 8003600:	e01a      	b.n	8003638 <rcc_wait_for_sysclk_status+0x54>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8003602:	bf00      	nop
 8003604:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <rcc_wait_for_sysclk_status+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d1f8      	bne.n	8003604 <rcc_wait_for_sysclk_status+0x20>
		break;
 8003612:	e012      	b.n	800363a <rcc_wait_for_sysclk_status+0x56>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8003614:	bf00      	nop
 8003616:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <rcc_wait_for_sysclk_status+0x64>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d1f8      	bne.n	8003616 <rcc_wait_for_sysclk_status+0x32>
		break;
 8003624:	e009      	b.n	800363a <rcc_wait_for_sysclk_status+0x56>
		while (((RCC_CFGR >> RCC_CFGR_SWS_SHIFT) & RCC_CFGR_SWS_MASK) !=
 8003626:	bf00      	nop
 8003628:	4b07      	ldr	r3, [pc, #28]	@ (8003648 <rcc_wait_for_sysclk_status+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f8      	bne.n	8003628 <rcc_wait_for_sysclk_status+0x44>
		break;
 8003636:	e000      	b.n	800363a <rcc_wait_for_sysclk_status+0x56>
		break;
 8003638:	bf00      	nop
	}
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40023808 	.word	0x40023808

0800364c <rcc_osc_on>:

void rcc_osc_on(enum rcc_osc osc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
	switch (osc) {
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d842      	bhi.n	80036e2 <rcc_osc_on+0x96>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <rcc_osc_on+0x18>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003681 	.word	0x08003681
 8003668:	080036c7 	.word	0x080036c7
 800366c:	080036d5 	.word	0x080036d5
 8003670:	0800368f 	.word	0x0800368f
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036ab 	.word	0x080036ab
 800367c:	080036b9 	.word	0x080036b9
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <rcc_osc_on+0xa4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <rcc_osc_on+0xa4>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368a:	6013      	str	r3, [r2, #0]
		break;
 800368c:	e029      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
 800368e:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <rcc_osc_on+0xa4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <rcc_osc_on+0xa4>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
		break;
 800369a:	e022      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_HSI:
		RCC_CR |= RCC_CR_HSION;
 800369c:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <rcc_osc_on+0xa4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	@ (80036f0 <rcc_osc_on+0xa4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6013      	str	r3, [r2, #0]
		break;
 80036a8:	e01b      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <rcc_osc_on+0xa8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <rcc_osc_on+0xa8>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6013      	str	r3, [r2, #0]
		break;
 80036b6:	e014      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <rcc_osc_on+0xac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <rcc_osc_on+0xac>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6013      	str	r3, [r2, #0]
		break;
 80036c4:	e00d      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_PLLSAI:
		RCC_CR |= RCC_CR_PLLSAION;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <rcc_osc_on+0xa4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <rcc_osc_on+0xa4>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	6013      	str	r3, [r2, #0]
		break;
 80036d2:	e006      	b.n	80036e2 <rcc_osc_on+0x96>
	case RCC_PLLI2S:
		RCC_CR |= RCC_CR_PLLI2SON;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <rcc_osc_on+0xa4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a05      	ldr	r2, [pc, #20]	@ (80036f0 <rcc_osc_on+0xa4>)
 80036da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036de:	6013      	str	r3, [r2, #0]
		break;
 80036e0:	bf00      	nop
	}
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40023870 	.word	0x40023870
 80036f8:	40023874 	.word	0x40023874

080036fc <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
	switch (osc) {
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d842      	bhi.n	8003792 <rcc_osc_off+0x96>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <rcc_osc_off+0x18>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003731 	.word	0x08003731
 8003718:	08003777 	.word	0x08003777
 800371c:	08003785 	.word	0x08003785
 8003720:	0800373f 	.word	0x0800373f
 8003724:	0800374d 	.word	0x0800374d
 8003728:	0800375b 	.word	0x0800375b
 800372c:	08003769 	.word	0x08003769
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800373a:	6013      	str	r3, [r2, #0]
		break;
 800373c:	e029      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_HSE:
		RCC_CR &= ~RCC_CR_HSEON;
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
		break;
 800374a:	e022      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_HSI:
		RCC_CR &= ~RCC_CR_HSION;
 800374c:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <rcc_osc_off+0xa4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6013      	str	r3, [r2, #0]
		break;
 8003758:	e01b      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_LSE:
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 800375a:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <rcc_osc_off+0xa8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <rcc_osc_off+0xa8>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]
		break;
 8003766:	e014      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8003768:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <rcc_osc_off+0xac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0e      	ldr	r2, [pc, #56]	@ (80037a8 <rcc_osc_off+0xac>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6013      	str	r3, [r2, #0]
		break;
 8003774:	e00d      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_PLLSAI:
		RCC_CR &= ~RCC_CR_PLLSAION;
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a09      	ldr	r2, [pc, #36]	@ (80037a0 <rcc_osc_off+0xa4>)
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003780:	6013      	str	r3, [r2, #0]
		break;
 8003782:	e006      	b.n	8003792 <rcc_osc_off+0x96>
	case RCC_PLLI2S:
		RCC_CR &= ~RCC_CR_PLLI2SON;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <rcc_osc_off+0xa4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <rcc_osc_off+0xa4>)
 800378a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800378e:	6013      	str	r3, [r2, #0]
		break;
 8003790:	bf00      	nop
	}
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40023870 	.word	0x40023870
 80037a8:	40023874 	.word	0x40023874

080037ac <rcc_set_sysclk_source>:
		(r << RCC_DCKCFGR_PLLSAIDIVR_SHIFT));
}


void rcc_set_sysclk_source(uint32_t clk)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	uint32_t reg32;

	reg32 = RCC_CFGR;
 80037b4:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <rcc_set_sysclk_source+0x2c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60fb      	str	r3, [r7, #12]
	reg32 &= ~((1 << 1) | (1 << 0));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	60fb      	str	r3, [r7, #12]
	RCC_CFGR = (reg32 | clk);
 80037c2:	4905      	ldr	r1, [pc, #20]	@ (80037d8 <rcc_set_sysclk_source+0x2c>)
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40023808 	.word	0x40023808

080037dc <rcc_set_ppre2>:
	reg32 &= ~(1 << 22);
	RCC_PLLCFGR = (reg32 | (pllsrc << 22));
}

void rcc_set_ppre2(uint32_t ppre2)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	uint32_t reg32;

	reg32 = RCC_CFGR;
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <rcc_set_ppre2+0x30>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80037f0:	60fb      	str	r3, [r7, #12]
	RCC_CFGR = (reg32 | (ppre2 << 13));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	035a      	lsls	r2, r3, #13
 80037f6:	4905      	ldr	r1, [pc, #20]	@ (800380c <rcc_set_ppre2+0x30>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023808 	.word	0x40023808

08003810 <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8003818:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <rcc_set_ppre1+0x30>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003824:	60fb      	str	r3, [r7, #12]
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	029a      	lsls	r2, r3, #10
 800382a:	4905      	ldr	r1, [pc, #20]	@ (8003840 <rcc_set_ppre1+0x30>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40023808 	.word	0x40023808

08003844 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	uint32_t reg32;

	reg32 = RCC_CFGR;
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <rcc_set_hpre+0x30>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003858:	60fb      	str	r3, [r7, #12]
	RCC_CFGR = (reg32 | (hpre << 4));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	011a      	lsls	r2, r3, #4
 800385e:	4905      	ldr	r1, [pc, #20]	@ (8003874 <rcc_set_hpre+0x30>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40023808 	.word	0x40023808

08003878 <rcc_set_main_pll_hsi>:
 * @param pllq Main PLL divider for USB OTG FS, SDMMC & RNG
 * @param pllr Main PLL divider for DSI (for parts without DSI, provide 0 here)
 */
void rcc_set_main_pll_hsi(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq, uint32_t pllr)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
	/* Use reset value if not legal, for parts without pllr */
	if (pllr < 2) {
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d801      	bhi.n	8003890 <rcc_set_main_pll_hsi+0x18>
		pllr = 2;
 800388c:	2302      	movs	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
	}
	RCC_PLLCFGR = 0 | /* HSI */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	0199      	lsls	r1, r3, #6
 800389a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800389e:	400b      	ands	r3, r1
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 80038a0:	431a      	orrs	r2, r3
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	3b01      	subs	r3, #1
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 80038ae:	431a      	orrs	r2, r3
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 80038b8:	431a      	orrs	r2, r3
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	071b      	lsls	r3, r3, #28
 80038be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
	RCC_PLLCFGR = 0 | /* HSI */
 80038c2:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <rcc_set_main_pll_hsi+0x5c>)
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 80038c4:	4313      	orrs	r3, r2
	RCC_PLLCFGR = 0 | /* HSI */
 80038c6:	600b      	str	r3, [r1, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40023804 	.word	0x40023804

080038d8 <rcc_set_main_pll_hse>:
 * @param pllq Main PLL divider for USB OTG FS, SDMMC & RNG
 * @param pllr Main PLL divider for DSI (for parts without DSI, provide 0 here)
 */
void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq, uint32_t pllr)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
	/* Use reset value if not legal, for parts without pllr */
	if (pllr < 2) {
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d801      	bhi.n	80038f0 <rcc_set_main_pll_hse+0x18>
		pllr = 2;
 80038ec:	2302      	movs	r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
	}
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	0199      	lsls	r1, r3, #6
 80038fa:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038fe:	400b      	ands	r3, r1
		((pllm & RCC_PLLCFGR_PLLM_MASK) << RCC_PLLCFGR_PLLM_SHIFT) |
 8003900:	431a      	orrs	r2, r3
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
		((plln & RCC_PLLCFGR_PLLN_MASK) << RCC_PLLCFGR_PLLN_SHIFT) |
 800390e:	431a      	orrs	r2, r3
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
		((((pllp >> 1) - 1) & RCC_PLLCFGR_PLLP_MASK) << RCC_PLLCFGR_PLLP_SHIFT) |
 8003918:	431a      	orrs	r2, r3
		((pllr & RCC_PLLCFGR_PLLR_MASK) << RCC_PLLCFGR_PLLR_SHIFT);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8003922:	4313      	orrs	r3, r2
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <rcc_set_main_pll_hse+0x60>)
		((pllq & RCC_PLLCFGR_PLLQ_MASK) << RCC_PLLCFGR_PLLQ_SHIFT) |
 8003926:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
	RCC_PLLCFGR = RCC_PLLCFGR_PLLSRC | /* HSE */
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40023804 	.word	0x40023804

0800393c <rcc_clock_setup_pll>:
 * needed to establish a system clock.
 *
 * @param clock clock information structure.
 */
void rcc_clock_setup_pll(const struct rcc_clock_scale *clock)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b085      	sub	sp, #20
 8003940:	af02      	add	r7, sp, #8
 8003942:	6078      	str	r0, [r7, #4]
	/* Enable internal high-speed oscillator (HSI). */
	rcc_osc_on(RCC_HSI);
 8003944:	2004      	movs	r0, #4
 8003946:	f7ff fe81 	bl	800364c <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 800394a:	2004      	movs	r0, #4
 800394c:	f7ff fe34 	bl	80035b8 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8003950:	2000      	movs	r0, #0
 8003952:	f7ff ff2b 	bl	80037ac <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator (HSE). */
	if (clock->pll_source == RCC_CFGR_PLLSRC_HSE_CLK) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	79db      	ldrb	r3, [r3, #7]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d105      	bne.n	800396a <rcc_clock_setup_pll+0x2e>
		rcc_osc_on(RCC_HSE);
 800395e:	2003      	movs	r0, #3
 8003960:	f7ff fe74 	bl	800364c <rcc_osc_on>
		rcc_wait_for_osc_ready(RCC_HSE);
 8003964:	2003      	movs	r0, #3
 8003966:	f7ff fe27 	bl	80035b8 <rcc_wait_for_osc_ready>
	}

	/* Set the VOS scale mode */
	rcc_periph_clock_enable(RCC_PWR);
 800396a:	f640 001c 	movw	r0, #2076	@ 0x81c
 800396e:	f000 f8a5 	bl	8003abc <rcc_periph_clock_enable>
	pwr_set_vos_scale(clock->voltage_scale);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7bdb      	ldrb	r3, [r3, #15]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fd80 	bl	800347c <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, APB1, APB2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7b1b      	ldrb	r3, [r3, #12]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7b5b      	ldrb	r3, [r3, #13]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff40 	bl	8003810 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7b9b      	ldrb	r3, [r3, #14]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff21 	bl	80037dc <rcc_set_ppre2>

	/* Disable PLL oscillator before changing its configuration. */
	rcc_osc_off(RCC_PLL);
 800399a:	2000      	movs	r0, #0
 800399c:	f7ff feae 	bl	80036fc <rcc_osc_off>

	/* Configure the PLL oscillator. */
	if (clock->pll_source == RCC_CFGR_PLLSRC_HSE_CLK) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	79db      	ldrb	r3, [r3, #7]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d112      	bne.n	80039ce <rcc_clock_setup_pll+0x92>
		rcc_set_main_pll_hse(clock->pllm, clock->plln,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	885b      	ldrh	r3, [r3, #2]
 80039b2:	4619      	mov	r1, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	791b      	ldrb	r3, [r3, #4]
		rcc_set_main_pll_hse(clock->pllm, clock->plln,
 80039b8:	461a      	mov	r2, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	795b      	ldrb	r3, [r3, #5]
		rcc_set_main_pll_hse(clock->pllm, clock->plln,
 80039be:	461c      	mov	r4, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	799b      	ldrb	r3, [r3, #6]
		rcc_set_main_pll_hse(clock->pllm, clock->plln,
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	4623      	mov	r3, r4
 80039c8:	f7ff ff86 	bl	80038d8 <rcc_set_main_pll_hse>
 80039cc:	e011      	b.n	80039f2 <rcc_clock_setup_pll+0xb6>
	} else {
		rcc_set_main_pll_hsi(clock->pllm, clock->plln,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	885b      	ldrh	r3, [r3, #2]
 80039d8:	4619      	mov	r1, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	791b      	ldrb	r3, [r3, #4]
		rcc_set_main_pll_hsi(clock->pllm, clock->plln,
 80039de:	461a      	mov	r2, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	795b      	ldrb	r3, [r3, #5]
		rcc_set_main_pll_hsi(clock->pllm, clock->plln,
 80039e4:	461c      	mov	r4, r3
				clock->pllp, clock->pllq, clock->pllr);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	799b      	ldrb	r3, [r3, #6]
		rcc_set_main_pll_hsi(clock->pllm, clock->plln,
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7ff ff43 	bl	8003878 <rcc_set_main_pll_hsi>
	}

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(RCC_PLL);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f7ff fe2a 	bl	800364c <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 80039f8:	2000      	movs	r0, #0
 80039fa:	f7ff fddd 	bl	80035b8 <rcc_wait_for_osc_ready>

	/* Configure flash settings. */
	if (clock->flash_config & FLASH_ACR_DCEN) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <rcc_clock_setup_pll+0xd4>
		flash_dcache_enable();
 8003a0a:	f7ff fa75 	bl	8002ef8 <flash_dcache_enable>
 8003a0e:	e001      	b.n	8003a14 <rcc_clock_setup_pll+0xd8>
	} else {
		flash_dcache_disable();
 8003a10:	f7ff fa82 	bl	8002f18 <flash_dcache_disable>
	}
	if (clock->flash_config & FLASH_ACR_ICEN) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <rcc_clock_setup_pll+0xea>
		flash_icache_enable();
 8003a20:	f7ff fa8a 	bl	8002f38 <flash_icache_enable>
 8003a24:	e001      	b.n	8003a2a <rcc_clock_setup_pll+0xee>
	} else {
		flash_icache_disable();
 8003a26:	f7ff fa97 	bl	8002f58 <flash_icache_disable>
	}
	flash_set_ws(clock->flash_config);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fa48 	bl	8002ec4 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8003a34:	2002      	movs	r0, #2
 8003a36:	f7ff feb9 	bl	80037ac <rcc_set_sysclk_source>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(RCC_PLL);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7ff fdd2 	bl	80035e4 <rcc_wait_for_sysclk_status>

	/* Set the peripheral clock frequencies used. */
	rcc_ahb_frequency  = clock->ahb_frequency;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <rcc_clock_setup_pll+0x134>)
 8003a46:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = clock->apb1_frequency;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	4a09      	ldr	r2, [pc, #36]	@ (8003a74 <rcc_clock_setup_pll+0x138>)
 8003a4e:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = clock->apb2_frequency;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <rcc_clock_setup_pll+0x13c>)
 8003a56:	6013      	str	r3, [r2, #0]

	/* Disable internal high-speed oscillator. */
	if (clock->pll_source == RCC_CFGR_PLLSRC_HSE_CLK) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	79db      	ldrb	r3, [r3, #7]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <rcc_clock_setup_pll+0x12a>
		rcc_osc_off(RCC_HSI);
 8003a60:	2004      	movs	r0, #4
 8003a62:	f7ff fe4b 	bl	80036fc <rcc_osc_off>
	}
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	20000010 	.word	0x20000010
 8003a78:	20000014 	.word	0x20000014

08003a7c <rcc_get_usart_clk_freq>:
/*---------------------------------------------------------------------------*/
/** @brief Get the peripheral clock speed for the USART at base specified.
 * @param usart  Base address of USART to get clock frequency for.
 */
uint32_t rcc_get_usart_clk_freq(uint32_t usart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	/* Handle values with selectable clocks. */
	if (usart == USART1_BASE || usart == USART6_BASE) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <rcc_get_usart_clk_freq+0x30>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <rcc_get_usart_clk_freq+0x18>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	@ (8003ab0 <rcc_get_usart_clk_freq+0x34>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <rcc_get_usart_clk_freq+0x1e>
		return rcc_apb2_frequency;
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <rcc_get_usart_clk_freq+0x38>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	e001      	b.n	8003a9e <rcc_get_usart_clk_freq+0x22>
	} else {
		return rcc_apb1_frequency;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <rcc_get_usart_clk_freq+0x3c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
	}
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	20000014 	.word	0x20000014
 8003ab8:	20000010 	.word	0x20000010

08003abc <rcc_periph_clock_enable>:
 * @param[in] clken rcc_periph_clken Peripheral RCC
 *
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */
void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad0:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aee:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8003af2:	4619      	mov	r1, r3
 8003af4:	ea42 0300 	orr.w	r3, r2, r0
 8003af8:	600b      	str	r3, [r1, #0]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	617b      	str	r3, [r7, #20]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
 8003b20:	617b      	str	r3, [r7, #20]

	cr1 |= clock_div | alignment | direction;
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

	TIM_CR1(timer_peripheral) = cr1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <timer_enable_preload>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <timer_continuous_mode>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f022 0208 	bic.w	r2, r2, #8
 8003b76:	601a      	str	r2, [r3, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <timer_update_on_overflow>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_update_on_overflow(uint32_t timer_peripheral)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	TIM_CR1(timer_peripheral) |= TIM_CR1_URS;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f042 0204 	orr.w	r2, r2, #4
 8003b96:	601a      	str	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <timer_enable_counter>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <timer_disable_counter>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <timer_set_dma_on_update_event>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
tim_reg_base
*/

void timer_set_dma_on_update_event(uint32_t timer_peripheral)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	TIM_CR2(timer_peripheral) |= TIM_CR2_CCDS;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	3204      	adds	r2, #4
 8003bf6:	f043 0308 	orr.w	r3, r3, #8
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <timer_set_prescaler>:
tim_reg_base
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	TIM_PSC(timer_peripheral) = value;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3328      	adds	r3, #40	@ 0x28
 8003c16:	461a      	mov	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <timer_set_period>:
tim_reg_base
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	TIM_ARR(timer_peripheral) = period;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	332c      	adds	r3, #44	@ 0x2c
 8003c36:	461a      	mov	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <timer_get_counter>:
@param[in] timer_peripheral Unsigned int32. Timer register address base
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	return TIM_CNT(timer_peripheral);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3324      	adds	r3, #36	@ 0x24
 8003c54:	681b      	ldr	r3, [r3, #0]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <usart_set_baudrate>:
usart_reg_base
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
	uint32_t clock = rcc_get_usart_clk_freq(usart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff05 	bl	8003a7c <rcc_get_usart_clk_freq>
 8003c72:	60f8      	str	r0, [r7, #12]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	085a      	lsrs	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	4619      	mov	r1, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	600b      	str	r3, [r1, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <usart_set_databits>:
usart_reg_base
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
	if (bits == 8) {
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d108      	bne.n	8003cb4 <usart_set_databits+0x22>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	320c      	adds	r2, #12
 8003cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb0:	6013      	str	r3, [r2, #0]
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
	}
}
 8003cb2:	e007      	b.n	8003cc4 <usart_set_databits+0x32>
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	320c      	adds	r2, #12
 8003cbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <usart_get_databits>:
usart_reg_base
@returns unsigned 32 bit Word length in bits 8 or 9.
*/

uint32_t usart_get_databits(uint32_t usart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	const uint32_t reg32 = USART_CR1(usart) & USART_CR1_M;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ce2:	60fb      	str	r3, [r7, #12]
	if (reg32)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <usart_get_databits+0x1e>
		return 9;
 8003cea:	2309      	movs	r3, #9
 8003cec:	e000      	b.n	8003cf0 <usart_get_databits+0x20>
	else
		return 8;
 8003cee:	2308      	movs	r3, #8
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <usart_set_stopbits>:
usart_reg_base
@param[in] stopbits unsigned 32 bit. Stop bits @ref usart_cr2_stopbits.
*/

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3310      	adds	r3, #16
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
	USART_CR2(usart) = reg32;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <usart_get_stopbits>:
usart_reg_base
@returns unsigned 32 bit Stop bits @ref usart_cr2_stopbits.
*/

uint32_t usart_get_stopbits(uint32_t usart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	const uint32_t reg32 = USART_CR2(usart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
	return reg32 & USART_CR2_STOPBITS_MASK;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <usart_set_parity>:
usart_reg_base
@param[in] parity unsigned 32 bit. Parity @ref usart_cr1_parity.
*/

void usart_set_parity(uint32_t usart, uint32_t parity)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
	USART_CR1(usart) = reg32;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	330c      	adds	r3, #12
 8003d74:	461a      	mov	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <usart_get_parity>:
usart_reg_base
@returns unsigned 32 bit Parity @ref usart_cr2_stopbits.
*/

uint32_t usart_get_parity(uint32_t usart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	const uint32_t reg32 = USART_CR1(usart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	330c      	adds	r3, #12
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
	return reg32 & USART_PARITY_MASK;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <usart_set_mode>:
usart_reg_base
@param[in] mode unsigned 32 bit. Mode @ref usart_cr1_mode.
*/

void usart_set_mode(uint32_t usart, uint32_t mode)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	330c      	adds	r3, #12
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f023 030c 	bic.w	r3, r3, #12
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
	USART_CR1(usart) = reg32;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <usart_set_flow_control>:
usart_reg_base
@param[in] flowcontrol unsigned 32 bit. Flowcontrol @ref usart_cr3_flowcontrol.
*/

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3314      	adds	r3, #20
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
	USART_CR3(usart) = reg32;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <usart_enable>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) |= USART_CR1_UE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	320c      	adds	r2, #12
 8003e22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <usart_disable>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) &= ~USART_CR1_UE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	320c      	adds	r2, #12
 8003e46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <usart_disable_rx_dma>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable_rx_dma(uint32_t usart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	USART_CR3(usart) &= ~USART_CR3_DMAR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3314      	adds	r3, #20
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	3214      	adds	r2, #20
 8003e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <usart_disable_tx_dma>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable_tx_dma(uint32_t usart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	USART_CR3(usart) &= ~USART_CR3_DMAT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3314      	adds	r3, #20
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	3214      	adds	r2, #20
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	6013      	str	r3, [r2, #0]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <usart_enable_rx_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_enable_rx_interrupt(uint32_t usart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) |= USART_CR1_RXNEIE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	320c      	adds	r2, #12
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <usart_disable_tx_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable_tx_interrupt(uint32_t usart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) &= ~USART_CR1_TXEIE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	320c      	adds	r2, #12
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <usart_disable_tx_complete_interrupt>:
 * @param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
 */

void usart_disable_tx_complete_interrupt(uint32_t usart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) &= ~USART_CR1_TCIE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	320c      	adds	r2, #12
 8003efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <usart_disable_idle_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable_idle_interrupt(uint32_t usart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	USART_CR1(usart) &= ~USART_CR1_IDLEIE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	330c      	adds	r3, #12
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	320c      	adds	r2, #12
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <usart_disable_error_interrupt>:
@param[in] usart unsigned 32 bit. USART block register address base @ref
usart_reg_base
*/

void usart_disable_error_interrupt(uint32_t usart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	USART_CR3(usart) &= ~USART_CR3_EIE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	3214      	adds	r2, #20
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f54:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f5c:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f5e:	490d      	ldr	r1, [pc, #52]	@ (8003f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f60:	4a0d      	ldr	r2, [pc, #52]	@ (8003f98 <LoopForever+0xe>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f64:	e002      	b.n	8003f6c <LoopCopyDataInit>

08003f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f6a:	3304      	adds	r3, #4

08003f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f70:	d3f9      	bcc.n	8003f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f74:	4c0a      	ldr	r4, [pc, #40]	@ (8003fa0 <LoopForever+0x16>)
  movs r3, #0
 8003f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f78:	e001      	b.n	8003f7e <LoopFillZerobss>

08003f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f7c:	3204      	adds	r2, #4

08003f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f80:	d3fb      	bcc.n	8003f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f82:	f000 f819 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f86:	f7ff f93f 	bl	8003208 <main>

08003f8a <LoopForever>:

LoopForever:
  b LoopForever
 8003f8a:	e7fe      	b.n	8003f8a <LoopForever>
  ldr   r0, =_estack
 8003f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f94:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003f98:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8003f9c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003fa0:	20013034 	.word	0x20013034

08003fa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fa4:	e7fe      	b.n	8003fa4 <ADC_IRQHandler>

08003fa6 <memset>:
 8003fa6:	4402      	add	r2, r0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d100      	bne.n	8003fb0 <memset+0xa>
 8003fae:	4770      	bx	lr
 8003fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb4:	e7f9      	b.n	8003faa <memset+0x4>
	...

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff0 <__libc_init_array+0x38>)
 8003fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff4 <__libc_init_array+0x3c>)
 8003fbe:	1b64      	subs	r4, r4, r5
 8003fc0:	10a4      	asrs	r4, r4, #2
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	42a6      	cmp	r6, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ff8 <__libc_init_array+0x40>)
 8003fca:	4c0c      	ldr	r4, [pc, #48]	@ (8003ffc <__libc_init_array+0x44>)
 8003fcc:	f000 f826 	bl	800401c <_init>
 8003fd0:	1b64      	subs	r4, r4, r5
 8003fd2:	10a4      	asrs	r4, r4, #2
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	42a6      	cmp	r6, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe0:	4798      	blx	r3
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	3601      	adds	r6, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	080040dc 	.word	0x080040dc
 8003ff4:	080040dc 	.word	0x080040dc
 8003ff8:	080040dc 	.word	0x080040dc
 8003ffc:	080040e0 	.word	0x080040e0

08004000 <memcpy>:
 8004000:	440a      	add	r2, r1
 8004002:	4291      	cmp	r1, r2
 8004004:	f100 33ff 	add.w	r3, r0, #4294967295
 8004008:	d100      	bne.n	800400c <memcpy+0xc>
 800400a:	4770      	bx	lr
 800400c:	b510      	push	{r4, lr}
 800400e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004016:	4291      	cmp	r1, r2
 8004018:	d1f9      	bne.n	800400e <memcpy+0xe>
 800401a:	bd10      	pop	{r4, pc}

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
